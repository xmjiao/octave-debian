/* A Bison parser, made by GNU Bison 3.0.4.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015 Free Software Foundation, Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "3.0.4"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 1

/* Pull parsers.  */
#define YYPULL 1

/* Substitute the type names.  */
#define YYSTYPE         OCTAVE_STYPE
/* Substitute the variable and function names.  */
#define yyparse         octave_parse
#define yypush_parse    octave_push_parse
#define yypull_parse    octave_pull_parse
#define yypstate_new    octave_pstate_new
#define yypstate_delete octave_pstate_delete
#define yypstate        octave_pstate
#define yylex           octave_lex
#define yyerror         octave_error
#define yydebug         octave_debug
#define yynerrs         octave_nerrs


/* Copy the first part of user declarations.  */
#line 30 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:339  */


#define YYDEBUG 1

#if defined (HAVE_CONFIG_H)
#  include "config.h"
#endif

#include <cassert>
#include <cstdio>
#include <cstdlib>

#include <iostream>
#include <map>
#include <sstream>

#include "Matrix.h"
#include "cmd-edit.h"
#include "cmd-hist.h"
#include "file-ops.h"
#include "file-stat.h"
#include "oct-env.h"
#include "oct-time.h"
#include "quit.h"

#include "Cell.h"
#include "call-stack.h"
#include "comment-list.h"
#include "defaults.h"
#include "defun.h"
#include "dirfns.h"
#include "dynamic-ld.h"
#include "error.h"
#include "input.h"
#include "interpreter.h"
#include "lex.h"
#include "load-path.h"
#include "oct-hist.h"
#include "oct-map.h"
#include "ov-classdef.h"
#include "ov-fcn-handle.h"
#include "ov-usr-fcn.h"
#include "ov-null-mat.h"
#include "pager.h"
#include "parse.h"
#include "pt-all.h"
#include "pt-eval.h"
#include "pt-funcall.h"
#include "symtab.h"
#include "token.h"
#include "unwind-prot.h"
#include "utils.h"
#include "variables.h"

// oct-parse.h must be included after pt-all.h
#include <oct-parse.h>

extern int octave_lex (YYSTYPE *, void *);

// Global access to currently active lexer.
// FIXME: to be removed after more parser+lexer refactoring.
octave::base_lexer *LEXER = 0;

// TRUE means we printed messages about reading startup files.
bool reading_startup_message_printed = false;

// List of autoloads (function -> file mapping).
static std::map<std::string, std::string> autoload_map;

// Forward declarations for some functions defined at the bottom of
// the file.

static void yyerror (octave::base_parser& parser, const char *s);

#define lexer parser.lexer
#define scanner lexer.scanner

#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
// Disable this warning for code that is generated by Bison, including
// grammar rules.  Push the current state so we can restore the warning
// state prior to functions we define at the bottom of the file.
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wold-style-cast"
#endif


#line 165 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:339  */

# ifndef YY_NULLPTR
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULLPTR nullptr
#  else
#   define YY_NULLPTR 0
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* In a future release of Bison, this section will be replaced
   by #include "y.tab.h".  */
#ifndef YY_OCTAVE_LIBINTERP_PARSE_TREE_OCT_PARSE_H_INCLUDED
# define YY_OCTAVE_LIBINTERP_PARSE_TREE_OCT_PARSE_H_INCLUDED
/* Debug traces.  */
#ifndef OCTAVE_DEBUG
# if defined YYDEBUG
#if YYDEBUG
#   define OCTAVE_DEBUG 1
#  else
#   define OCTAVE_DEBUG 0
#  endif
# else /* ! defined YYDEBUG */
#  define OCTAVE_DEBUG 0
# endif /* ! defined YYDEBUG */
#endif  /* ! defined OCTAVE_DEBUG */
#if OCTAVE_DEBUG
extern int octave_debug;
#endif

/* Token type.  */
#ifndef OCTAVE_TOKENTYPE
# define OCTAVE_TOKENTYPE
  enum octave_tokentype
  {
    ADD_EQ = 258,
    SUB_EQ = 259,
    MUL_EQ = 260,
    DIV_EQ = 261,
    LEFTDIV_EQ = 262,
    POW_EQ = 263,
    EMUL_EQ = 264,
    EDIV_EQ = 265,
    ELEFTDIV_EQ = 266,
    EPOW_EQ = 267,
    AND_EQ = 268,
    OR_EQ = 269,
    EXPR_AND_AND = 270,
    EXPR_OR_OR = 271,
    EXPR_AND = 272,
    EXPR_OR = 273,
    EXPR_NOT = 274,
    EXPR_LT = 275,
    EXPR_LE = 276,
    EXPR_EQ = 277,
    EXPR_NE = 278,
    EXPR_GE = 279,
    EXPR_GT = 280,
    LEFTDIV = 281,
    EMUL = 282,
    EDIV = 283,
    ELEFTDIV = 284,
    EPLUS = 285,
    EMINUS = 286,
    HERMITIAN = 287,
    TRANSPOSE = 288,
    PLUS_PLUS = 289,
    MINUS_MINUS = 290,
    POW = 291,
    EPOW = 292,
    NUM = 293,
    IMAG_NUM = 294,
    STRUCT_ELT = 295,
    NAME = 296,
    END = 297,
    DQ_STRING = 298,
    SQ_STRING = 299,
    FOR = 300,
    PARFOR = 301,
    WHILE = 302,
    DO = 303,
    UNTIL = 304,
    IF = 305,
    ELSEIF = 306,
    ELSE = 307,
    SWITCH = 308,
    CASE = 309,
    OTHERWISE = 310,
    BREAK = 311,
    CONTINUE = 312,
    FUNC_RET = 313,
    UNWIND = 314,
    CLEANUP = 315,
    TRY = 316,
    CATCH = 317,
    GLOBAL = 318,
    PERSISTENT = 319,
    FCN_HANDLE = 320,
    CLASSDEF = 321,
    PROPERTIES = 322,
    METHODS = 323,
    EVENTS = 324,
    ENUMERATION = 325,
    METAQUERY = 326,
    SUPERCLASSREF = 327,
    FQ_IDENT = 328,
    GET = 329,
    SET = 330,
    FCN = 331,
    LEXICAL_ERROR = 332,
    END_OF_INPUT = 333,
    INPUT_FILE = 334,
    UNARY = 335
  };
#endif
/* Tokens.  */
#define ADD_EQ 258
#define SUB_EQ 259
#define MUL_EQ 260
#define DIV_EQ 261
#define LEFTDIV_EQ 262
#define POW_EQ 263
#define EMUL_EQ 264
#define EDIV_EQ 265
#define ELEFTDIV_EQ 266
#define EPOW_EQ 267
#define AND_EQ 268
#define OR_EQ 269
#define EXPR_AND_AND 270
#define EXPR_OR_OR 271
#define EXPR_AND 272
#define EXPR_OR 273
#define EXPR_NOT 274
#define EXPR_LT 275
#define EXPR_LE 276
#define EXPR_EQ 277
#define EXPR_NE 278
#define EXPR_GE 279
#define EXPR_GT 280
#define LEFTDIV 281
#define EMUL 282
#define EDIV 283
#define ELEFTDIV 284
#define EPLUS 285
#define EMINUS 286
#define HERMITIAN 287
#define TRANSPOSE 288
#define PLUS_PLUS 289
#define MINUS_MINUS 290
#define POW 291
#define EPOW 292
#define NUM 293
#define IMAG_NUM 294
#define STRUCT_ELT 295
#define NAME 296
#define END 297
#define DQ_STRING 298
#define SQ_STRING 299
#define FOR 300
#define PARFOR 301
#define WHILE 302
#define DO 303
#define UNTIL 304
#define IF 305
#define ELSEIF 306
#define ELSE 307
#define SWITCH 308
#define CASE 309
#define OTHERWISE 310
#define BREAK 311
#define CONTINUE 312
#define FUNC_RET 313
#define UNWIND 314
#define CLEANUP 315
#define TRY 316
#define CATCH 317
#define GLOBAL 318
#define PERSISTENT 319
#define FCN_HANDLE 320
#define CLASSDEF 321
#define PROPERTIES 322
#define METHODS 323
#define EVENTS 324
#define ENUMERATION 325
#define METAQUERY 326
#define SUPERCLASSREF 327
#define FQ_IDENT 328
#define GET 329
#define SET 330
#define FCN 331
#define LEXICAL_ERROR 332
#define END_OF_INPUT 333
#define INPUT_FILE 334
#define UNARY 335

/* Value type.  */
#if ! defined OCTAVE_STYPE && ! defined OCTAVE_STYPE_IS_DECLARED

union OCTAVE_STYPE
{
#line 141 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:355  */

  int dummy_type;

  // The type of the basic tokens returned by the lexer.
  token *tok_val;

  // Comment strings that we need to deal with mid-rule.
  octave_comment_list *comment_type;

  // Types for the nonterminals we generate.
  char punct_type;
  tree *tree_type;
  tree_matrix *tree_matrix_type;
  tree_cell *tree_cell_type;
  tree_expression *tree_expression_type;
  tree_constant *tree_constant_type;
  tree_fcn_handle *tree_fcn_handle_type;
  tree_funcall *tree_funcall_type;
  tree_function_def *tree_function_def_type;
  tree_anon_fcn_handle *tree_anon_fcn_handle_type;
  tree_identifier *tree_identifier_type;
  tree_index_expression *tree_index_expression_type;
  tree_colon_expression *tree_colon_expression_type;
  tree_argument_list *tree_argument_list_type;
  tree_parameter_list *tree_parameter_list_type;
  tree_command *tree_command_type;
  tree_if_command *tree_if_command_type;
  tree_if_clause *tree_if_clause_type;
  tree_if_command_list *tree_if_command_list_type;
  tree_switch_command *tree_switch_command_type;
  tree_switch_case *tree_switch_case_type;
  tree_switch_case_list *tree_switch_case_list_type;
  tree_decl_elt *tree_decl_elt_type;
  tree_decl_init_list *tree_decl_init_list_type;
  tree_decl_command *tree_decl_command_type;
  tree_statement *tree_statement_type;
  tree_statement_list *tree_statement_list_type;
  octave_user_function *octave_user_function_type;

  tree_classdef *tree_classdef_type;
  tree_classdef_attribute* tree_classdef_attribute_type;
  tree_classdef_attribute_list* tree_classdef_attribute_list_type;
  tree_classdef_superclass* tree_classdef_superclass_type;
  tree_classdef_superclass_list* tree_classdef_superclass_list_type;
  tree_classdef_body* tree_classdef_body_type;
  tree_classdef_property* tree_classdef_property_type;
  tree_classdef_property_list* tree_classdef_property_list_type;
  tree_classdef_properties_block* tree_classdef_properties_block_type;
  tree_classdef_methods_list* tree_classdef_methods_list_type;
  tree_classdef_methods_block* tree_classdef_methods_block_type;
  tree_classdef_event* tree_classdef_event_type;
  tree_classdef_events_list* tree_classdef_events_list_type;
  tree_classdef_events_block* tree_classdef_events_block_type;
  tree_classdef_enum* tree_classdef_enum_type;
  tree_classdef_enum_list* tree_classdef_enum_list_type;
  tree_classdef_enum_block* tree_classdef_enum_block_type;

#line 431 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:355  */
};

typedef union OCTAVE_STYPE OCTAVE_STYPE;
# define OCTAVE_STYPE_IS_TRIVIAL 1
# define OCTAVE_STYPE_IS_DECLARED 1
#endif



#ifndef YYPUSH_MORE_DEFINED
# define YYPUSH_MORE_DEFINED
enum { YYPUSH_MORE = 4 };
#endif

typedef struct octave_pstate octave_pstate;

int octave_parse (octave::base_parser& parser);
int octave_push_parse (octave_pstate *ps, int pushed_char, OCTAVE_STYPE const *pushed_val, octave::base_parser& parser);
int octave_pull_parse (octave_pstate *ps, octave::base_parser& parser);
octave_pstate * octave_pstate_new (void);
void octave_pstate_delete (octave_pstate *ps);

#endif /* !YY_OCTAVE_LIBINTERP_PARSE_TREE_OCT_PARSE_H_INCLUDED  */

/* Copy the second part of user declarations.  */

#line 458 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:358  */

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

#ifndef YY_ATTRIBUTE
# if (defined __GNUC__                                               \
      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \
     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C
#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)
# else
#  define YY_ATTRIBUTE(Spec) /* empty */
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))
#endif

#if !defined _Noreturn \
     && (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112)
# if defined _MSC_VER && 1200 <= _MSC_VER
#  define _Noreturn __declspec (noreturn)
# else
#  define _Noreturn YY_ATTRIBUTE ((__noreturn__))
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif


#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined OCTAVE_STYPE_IS_TRIVIAL && OCTAVE_STYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYSIZE_T yynewbytes;                                            \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / sizeof (*yyptr);                          \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYSIZE_T yyi;                         \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  110
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   1508

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  98
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  105
/* YYNRULES -- Number of rules.  */
#define YYNRULES  278
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  516

/* YYTRANSLATE[YYX] -- Symbol number corresponding to YYX as returned
   by yylex, with out-of-bounds checking.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   335

#define YYTRANSLATE(YYX)                                                \
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, without out-of-bounds checking.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
      96,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
      86,    87,     7,     6,    93,     5,    92,     8,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     4,    94,
       2,     3,     2,     2,    95,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,    88,     2,    89,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,    90,     2,    91,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    97
};

#if OCTAVE_DEBUG
  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   389,   389,   395,   402,   409,   415,   419,   421,   426,
     427,   431,   435,   437,   441,   443,   445,   457,   468,   470,
     481,   489,   498,   506,   508,   512,   514,   516,   520,   524,
     526,   540,   544,   546,   565,   566,   568,   570,   572,   574,
     578,   585,   592,   594,   596,   598,   603,   605,   607,   609,
     613,   622,   630,   632,   634,   636,   641,   646,   653,   660,
     662,   664,   666,   675,   684,   693,   702,   704,   706,   708,
     710,   712,   714,   716,   718,   720,   722,   724,   726,   728,
     730,   732,   734,   736,   738,   740,   742,   746,   748,   750,
     752,   761,   770,   779,   788,   790,   792,   794,   796,   798,
     800,   804,   808,   810,   823,   825,   827,   829,   831,   833,
     835,   837,   839,   841,   843,   847,   861,   863,   865,   867,
     869,   871,   873,   875,   877,   879,   881,   883,   885,   889,
     904,   911,   919,   921,   923,   925,   927,   929,   931,   939,
     944,   951,   953,   961,   966,   968,   981,   983,   991,  1001,
    1003,  1010,  1018,  1025,  1036,  1049,  1062,  1063,  1065,  1067,
    1074,  1076,  1083,  1092,  1105,  1117,  1124,  1136,  1148,  1160,
    1178,  1180,  1182,  1190,  1203,  1216,  1233,  1265,  1279,  1287,
    1294,  1303,  1304,  1320,  1322,  1329,  1331,  1339,  1345,  1363,
    1380,  1382,  1393,  1419,  1435,  1444,  1450,  1460,  1469,  1478,
    1489,  1507,  1513,  1521,  1534,  1574,  1587,  1600,  1615,  1616,
    1620,  1622,  1629,  1631,  1638,  1648,  1649,  1654,  1653,  1662,
    1661,  1674,  1678,  1680,  1682,  1684,  1686,  1693,  1700,  1707,
    1717,  1729,  1743,  1745,  1754,  1756,  1765,  1777,  1791,  1796,
    1803,  1806,  1805,  1820,  1822,  1826,  1834,  1848,  1860,  1873,
    1875,  1884,  1888,  1900,  1913,  1915,  1924,  1933,  1940,  1943,
    1949,  1953,  1955,  1957,  1959,  1964,  1965,  1970,  1971,  1975,
    1977,  1981,  1983,  1985,  1987,  1989,  1991,  1996,  1997
};
#endif

#if OCTAVE_DEBUG || YYERROR_VERBOSE || 0
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "'='", "':'", "'-'", "'+'", "'*'", "'/'",
  "ADD_EQ", "SUB_EQ", "MUL_EQ", "DIV_EQ", "LEFTDIV_EQ", "POW_EQ",
  "EMUL_EQ", "EDIV_EQ", "ELEFTDIV_EQ", "EPOW_EQ", "AND_EQ", "OR_EQ",
  "EXPR_AND_AND", "EXPR_OR_OR", "EXPR_AND", "EXPR_OR", "EXPR_NOT",
  "EXPR_LT", "EXPR_LE", "EXPR_EQ", "EXPR_NE", "EXPR_GE", "EXPR_GT",
  "LEFTDIV", "EMUL", "EDIV", "ELEFTDIV", "EPLUS", "EMINUS", "HERMITIAN",
  "TRANSPOSE", "PLUS_PLUS", "MINUS_MINUS", "POW", "EPOW", "NUM",
  "IMAG_NUM", "STRUCT_ELT", "NAME", "END", "DQ_STRING", "SQ_STRING", "FOR",
  "PARFOR", "WHILE", "DO", "UNTIL", "IF", "ELSEIF", "ELSE", "SWITCH",
  "CASE", "OTHERWISE", "BREAK", "CONTINUE", "FUNC_RET", "UNWIND",
  "CLEANUP", "TRY", "CATCH", "GLOBAL", "PERSISTENT", "FCN_HANDLE",
  "CLASSDEF", "PROPERTIES", "METHODS", "EVENTS", "ENUMERATION",
  "METAQUERY", "SUPERCLASSREF", "FQ_IDENT", "GET", "SET", "FCN",
  "LEXICAL_ERROR", "END_OF_INPUT", "INPUT_FILE", "'('", "')'", "'['",
  "']'", "'{'", "'}'", "'.'", "','", "';'", "'@'", "'\\n'", "UNARY",
  "$accept", "input", "simple_list", "simple_list1", "opt_list", "list",
  "list1", "statement", "word_list_cmd", "word_list", "identifier",
  "superclass_identifier", "meta_identifier", "string", "constant",
  "matrix", "matrix_rows", "cell", "cell_rows", "cell_or_matrix_row",
  "fcn_handle", "anon_fcn_handle", "primary_expr", "magic_colon",
  "magic_tilde", "arg_list", "indirect_ref_op", "oper_expr", "power_expr",
  "colon_expr", "colon_expr1", "simple_expr", "assign_lhs", "assign_expr",
  "expression", "command", "declaration", "decl1", "decl_param_init",
  "decl2", "select_command", "if_command", "if_cmd_list", "if_cmd_list1",
  "elseif_clause", "else_clause", "switch_command", "case_list",
  "case_list1", "switch_case", "default_case", "loop_command",
  "jump_command", "except_command", "push_fcn_symtab", "param_list_beg",
  "param_list_end", "param_list", "param_list1", "param_list2",
  "param_list_elt", "return_list", "return_list1", "file", "function_beg",
  "function", "fcn_name", "function1", "function2", "function_end",
  "classdef_beg", "classdef", "opt_attr_list", "attr_list", "attr",
  "opt_superclass_list", "superclass_list", "$@1", "$@2", "superclass",
  "class_body", "properties_block", "property_list", "class_property",
  "methods_block", "method_decl1", "method_decl", "$@3", "method",
  "methods_list", "events_block", "events_list", "class_event",
  "enum_block", "enum_list", "class_enum", "stmt_begin", "stash_comment",
  "parse_error", "sep_no_nl", "opt_sep_no_nl", "opt_nl", "nl", "sep",
  "opt_sep", YY_NULLPTR
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,    61,    58,    45,    43,    42,    47,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,    40,    41,    91,    93,
     123,   125,    46,    44,    59,    64,    10,   335
};
# endif

#define YYPACT_NINF -413

#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-413)))

#define YYTABLE_NINF -266

#define yytable_value_is_error(Yytable_value) \
  0

  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
static const yytype_int16 yypact[] =
{
     554,  -413,  1173,  1173,  1173,  1173,  1173,  -413,  -413,  -413,
    -413,  -413,  -413,  -413,  -413,  -413,  -413,  -413,  -413,  -413,
    -413,  -413,  -413,    16,    16,  -413,  -413,  -413,    -5,  1194,
     415,   415,  -413,  -413,    28,    72,   -30,   -47,  -413,  -413,
     165,  -413,  -413,  -413,  -413,  -413,  -413,  -413,  -413,  -413,
    1348,  -413,    89,  1432,   905,  -413,  -413,  -413,  -413,  -413,
    -413,  -413,  -413,  -413,  -413,    34,  -413,  -413,  -413,  -413,
     110,  -413,    31,  -413,   127,   127,   127,   127,   127,  1250,
    1271,  1194,    59,  1194,  1194,    59,    59,   147,    16,  -413,
      16,  -413,   973,    68,    86,  -413,  1173,   851,   -39,  -413,
    -413,  -413,   100,  -413,    91,  -413,  -413,  -413,    20,  -413,
    -413,  -413,  -413,   907,  -413,   165,  -413,  1173,  1173,  1173,
    1173,  1173,  1173,  1173,  1173,  1173,  1173,  -413,  -413,  -413,
    -413,  1327,  1327,   687,   713,  -413,    -4,  1173,  1173,  1173,
    1173,  1173,  1173,  1173,  1173,  1173,  1173,  1173,  1194,  1194,
    1194,  1194,  1194,  1194,  1194,  1194,  1194,  1194,  1194,  1194,
    1194,  -413,   -10,  -413,  -413,  1194,   323,   193,  1194,   197,
    -413,  -413,  -413,  -413,   129,  1041,  -413,   168,   181,    59,
    1041,  1041,  -413,  -413,  -413,   136,  -413,    59,  -413,  -413,
      59,  -413,  -413,   143,  -413,   415,   851,  -413,   415,  -413,
    -413,  -413,  -413,   153,   161,  -413,  1107,  -413,  -413,  1386,
    1386,   127,   127,   127,   127,   127,   127,  1386,  1386,  1327,
    1327,  1327,  1327,  1327,  -413,   -11,   -11,  -413,    11,  -413,
      10,  -413,  1194,  1348,   333,   221,   249,   240,  -413,  -413,
    -413,  -413,  -413,  -413,  -413,  -413,  -413,  -413,  -413,  -413,
    -413,  -413,  -413,  -413,  -413,  -413,  -413,   173,   191,   -13,
     283,   286,    98,  -413,  1470,  1194,  1488,  1194,    59,  -413,
    -413,  -413,   236,    59,  -413,  -413,  -413,  -413,  -413,   196,
     229,    95,  1194,  -413,   620,  -413,   212,   217,   851,  -413,
    -413,  -413,  -413,  -413,  -413,  -413,    36,  -413,   -11,   -11,
     -11,   -11,   -11,  -413,  -413,   775,   789,     3,  -413,   851,
    -413,   223,    16,    16,  -413,  -413,    49,   -12,    59,  -413,
    1041,  1194,  -413,  1194,  -413,  1041,  1194,  1041,    59,    59,
    -413,  -413,   260,   196,  -413,  -413,  -413,  -413,  -413,  -413,
    -413,    39,    16,  -413,  -413,  -413,    19,  -413,   116,  -413,
    1194,  -413,  -413,  -413,  -413,    16,  -413,  -413,  1041,    -7,
     234,    59,   230,    59,   268,  -413,  -413,  1194,  1041,    59,
      59,  -413,  -413,  -413,    59,    59,    16,   319,   108,  -413,
     298,  -413,  -413,   243,  -413,    -7,  -413,  -413,  -413,    59,
    1041,  1194,  1041,  -413,  -413,  -413,  1194,  1041,  1041,  1041,
    -413,  -413,  -413,    39,  -413,    59,   308,  -413,  -413,  1041,
     284,   248,   285,    59,  -413,  -413,   289,   290,  1194,  -413,
     261,   103,  -413,   291,  -413,    59,  -413,  1041,    59,  -413,
    -413,  -413,  -413,  -413,  -413,  -413,  -413,  -413,  -413,    59,
    -413,  -413,  -413,  -413,   261,  -413,  1041,  -413,  1041,   212,
     212,   212,   212,   154,  -413,   300,  -413,    59,    59,    59,
      59,  -413,  -413,  -413,  -413,  -413,  -413,   246,     5,   257,
     259,  -413,   362,    59,  -413,  -413,  -413,  -413,  -413,    59,
     -14,  -413,  -413,    59,  -413,  -413,   280,    59,  -413,  -413,
       1,   321,    14,    25,   367,  -413,   267,  1194,   271,  1194,
    -413,  -413,  -413,  -413,  -413,  -413,  -413,  -413,   287,  -413,
    -413,  -413,    16,  -413,   292,  -413
};

  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,   260,     0,     0,     0,     0,     0,    25,    26,    20,
      23,    24,   258,   258,   258,   258,   258,   258,   170,   171,
     172,   258,   258,     0,     0,    22,    21,   259,   267,     0,
      34,    34,   261,   262,     0,     0,     0,   265,     7,    16,
      42,    48,    47,    27,    43,    45,    46,    44,   131,    59,
     102,   104,   101,   129,     0,   130,    14,    15,   132,   133,
     146,   147,   134,   135,   136,     0,   138,   258,   137,     4,
     266,     5,     0,    42,    74,    73,    72,    70,    71,     0,
       0,     0,   277,     0,     0,   277,   277,   144,   139,   141,
     140,   269,     9,   268,     0,    50,    51,    35,     0,    29,
      53,    54,    36,    52,     0,    32,    40,   177,     0,   257,
       1,     3,     2,   266,     6,    17,    18,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    66,    67,    60,
      61,     0,     0,     0,     0,    58,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   194,     0,   263,   264,     0,   115,     0,     0,     0,
     257,   271,   272,   273,   278,     9,   257,     0,   149,   277,
       9,     9,   143,   142,   205,     0,    10,   277,    12,   258,
     277,   270,    49,    38,    28,    34,    37,    31,    34,   180,
      51,   186,   185,     0,   182,   183,   176,     8,    19,    78,
      77,    79,    80,    85,    83,    84,    86,    81,    82,     0,
       0,     0,     0,     0,    87,    75,    76,    62,     0,    64,
       0,    68,     0,   103,   113,   114,   111,   112,   105,   106,
     107,   110,   108,   109,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,     0,     0,     0,
     197,     0,   277,   195,     0,     0,     0,     0,   277,   274,
     275,   276,     0,   277,   148,   258,   258,   152,   150,   156,
       0,     0,     0,   192,   278,    11,   208,     0,    39,    30,
      55,    56,    57,    33,   178,   179,     0,    41,   100,    99,
      98,    96,    97,    88,    89,     0,     0,     0,    63,     0,
      65,     0,     0,     0,   187,   190,     0,     0,   277,   200,
       9,     0,   257,     0,   257,     9,     0,     9,   277,   277,
     258,   258,     0,   158,   160,   157,   258,   175,   258,   145,
      13,     0,     0,   193,   184,    90,     0,    92,     0,    94,
       0,    69,   198,   199,   189,     0,   197,   196,     9,     0,
       0,   277,   116,   277,     0,   165,   151,     0,     9,   277,
     277,   155,   161,   159,   277,   277,     0,   212,     0,   210,
     215,    91,    93,     0,   191,     0,   203,   204,   202,   277,
       9,     0,     9,   164,   257,   154,     0,     9,     9,     9,
     214,   143,   209,     0,   217,   277,   216,    95,   201,     9,
       0,     0,     0,   277,   257,   163,     0,     0,     0,   211,
       0,     0,   219,     0,   166,   277,   168,     9,   277,   173,
     174,   213,   221,   218,   207,   258,   258,   258,   258,   277,
     222,   223,   224,   225,     0,   167,     9,   153,     9,   208,
     208,   208,   208,     0,   220,     0,   162,   277,   277,   277,
     277,   206,   226,   227,   228,   229,   169,     0,   258,     0,
       0,   231,   234,   277,   232,   237,   244,   243,   245,   277,
       0,   248,   251,   277,   249,   253,     0,   277,   254,   143,
     278,     0,   258,   238,     0,   240,     0,     0,     0,     0,
     233,   230,   236,   246,   239,   241,   247,   250,     0,   252,
     255,   235,     0,   256,   238,   242
};

  /* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -413,  -413,  -413,  -413,  -137,  -413,  -413,     4,  -413,  -413,
       0,  -413,  -413,   -15,  -413,  -413,  -413,  -413,  -413,    -9,
    -413,  -413,  -100,  -170,   -91,   -94,  -141,   410,   -74,  -413,
    -413,   601,   -28,  -413,   -24,  -413,  -413,   347,  -374,   -72,
    -413,  -413,  -413,  -413,  -413,  -413,  -413,  -413,  -413,    40,
      44,  -413,  -413,  -413,  -413,  -413,  -413,   -25,  -413,  -413,
      83,   -98,  -413,  -413,  -413,  -412,  -413,    63,  -413,    -1,
    -413,  -413,  -217,  -413,   -20,  -413,  -413,  -413,  -413,   -59,
    -413,   -66,  -413,  -102,   -64,  -121,  -413,  -413,   -99,  -413,
     -58,  -413,   -96,   -57,  -413,   -97,  -168,    -2,  -413,   365,
     368,  -413,  -413,  -186,   113
};

  /* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    35,    36,    37,   185,   186,   187,   188,    39,   115,
      73,    41,    42,    43,    44,    45,    98,    46,   104,    99,
      47,    48,    49,   100,   101,   102,   136,    50,   225,    51,
      52,    53,    54,    55,    56,    57,    58,    88,   282,    89,
      59,    60,   177,   178,   277,   278,    61,   332,   333,   334,
     335,    62,    63,    64,    65,   108,   295,   504,   203,   204,
     205,   261,   316,    66,    67,    68,   262,   263,   319,   388,
     189,   190,   342,   378,   379,   405,   406,   420,   444,   433,
     439,   440,   473,   474,   441,   495,   477,   512,   478,   479,
     442,   483,   484,   443,   487,   488,   206,   480,    69,    70,
      71,    92,    93,   174,   175
};

  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
      40,   284,   268,   193,    38,    94,   103,   103,   273,   109,
      79,    80,    81,    82,    83,    84,   183,   201,   183,    85,
      86,   199,   105,    87,    87,   116,   290,   418,  -188,   303,
     304,   224,   224,     9,     9,     9,   202,     9,   272,   228,
     230,   386,   231,   280,   281,   200,    32,    33,     9,   349,
     194,   167,   169,   475,   111,   195,   476,   170,   226,   176,
     179,   200,   502,     9,   376,   162,   112,     9,   257,   258,
     257,   258,   110,   103,   259,   305,   314,   387,   259,   306,
     476,   135,   232,     9,   307,   307,     9,  -176,    87,   350,
      87,    91,    40,   137,   269,   270,  -176,   271,   308,   106,
     208,   310,   106,   309,   309,   291,   381,  -181,    87,   103,
     103,   107,   309,    40,   107,   499,   161,   207,   290,   224,
     224,   224,   224,   224,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   264,   354,   290,
     266,    94,   355,   337,    94,   298,   299,   300,   301,   302,
     182,   434,   171,   172,   361,   173,   363,   307,   307,   307,
     307,   307,   260,   338,   191,   127,   128,   129,   130,   131,
     132,   103,   292,   192,   103,    40,   435,   436,   437,   438,
      40,    40,   197,   359,   107,   198,   289,   286,   364,   293,
     366,   171,   172,   196,   173,   402,   265,   291,   180,   181,
     267,   403,   461,   163,   164,   201,    40,   382,   311,   309,
     297,   346,   348,   133,    10,    11,   274,   134,   291,   135,
     283,   385,   269,   270,   202,   271,   413,   435,   436,   437,
     438,   395,   457,   458,   459,   460,   288,   318,   275,   276,
     294,   322,   138,   324,   140,   141,   428,   142,   143,   144,
     145,   146,   147,   410,   296,   412,   330,   331,   339,   315,
     415,   416,   417,   140,   292,   312,   142,   143,   144,   145,
     146,   147,   423,   328,   329,   142,   143,   144,   145,   146,
     147,   103,   103,   313,    40,   292,  -188,   490,   340,   317,
     447,   326,   279,     9,   471,   336,    87,   360,   341,   362,
     285,   343,   365,   287,     9,   481,     9,   485,   371,   455,
     351,   456,   352,   353,     9,   506,   393,   356,     9,   509,
      40,   389,   401,   391,   404,    40,   383,    40,   369,   370,
     407,   422,   424,   426,   374,   425,   375,   429,   430,   445,
     432,   377,   380,   394,   138,   139,   140,   141,   466,   142,
     143,   144,   145,   146,   147,   384,   140,   141,    40,   142,
     143,   144,   145,   146,   147,   489,   497,   411,    40,   501,
     505,    90,   414,   372,   513,   320,   400,   373,   107,   344,
     357,   325,   494,   419,   408,   454,   327,   462,   500,   463,
      40,   515,    40,   503,   431,   464,   465,    40,    40,    40,
     507,   510,   113,   377,     0,   114,     0,     0,     0,    40,
       0,     0,    74,    75,    76,    77,    78,     0,     0,    95,
       2,     3,     0,     0,     0,     0,     0,    40,     0,     0,
       0,   358,     0,   449,   450,   451,   452,     0,     0,     0,
      96,   367,   368,     0,     0,     0,    40,     0,    40,     0,
       0,     0,     0,     0,     0,     5,     6,     0,     0,     7,
       8,     0,     9,     0,    10,    11,     0,   472,     0,   482,
     486,     0,     0,   508,   390,   511,   392,     0,     0,     0,
     493,     0,   396,   397,     0,     0,     0,   398,   399,     0,
     472,     0,    25,    26,     0,     0,   482,     0,   486,     0,
       0,    29,   409,    30,     0,    31,    76,     0,    97,     0,
      34,     0,   514,     0,     0,     0,     0,     0,   421,     0,
       0,     0,     0,     0,     0,     0,   427,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,     0,   446,     0,
       0,   448,     0,     0,     0,     0,     0,   233,     0,     0,
       0,     0,   453,     0,     0,     1,     0,     0,     0,     2,
       3,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     467,   468,   469,   470,     0,     0,     0,     0,     0,     4,
       0,     0,     0,     0,     0,     0,   491,     0,     0,     0,
       0,     0,   492,     0,     5,     6,   496,     0,     7,     8,
     498,     9,     0,    10,    11,    12,    13,    14,    15,     0,
      16,     0,     0,    17,     0,     0,    18,    19,    20,    21,
       0,    22,     0,    23,    24,     2,     3,     0,     0,     0,
       0,    25,    26,     0,     0,     0,  -176,    27,  -265,    28,
      29,     0,    30,     0,    31,     4,     0,    32,    33,    34,
    -265,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       5,     6,     0,     0,     7,     8,     0,     9,     0,    10,
      11,    12,    13,    14,    15,     0,    16,     0,     0,    17,
     166,   166,    18,    19,    20,    21,     0,    22,     0,    23,
      24,    95,     2,     3,     0,     0,     0,    25,    26,     0,
       0,     0,  -176,     0,     0,    28,    29,     0,    30,     0,
      31,     0,    96,   269,   270,    34,   271,    95,     2,     3,
       0,     0,     0,     0,     0,     0,     0,     5,     6,     0,
       0,     7,     8,     0,     9,     0,    10,    11,    96,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,     0,
       0,     0,     0,     5,     6,     0,     0,     7,     8,     0,
       9,     0,    10,    11,    25,    26,     0,     0,     0,     0,
       0,     0,     0,    29,   227,    30,     0,    31,     0,    95,
       2,     3,    34,     0,     0,     0,     0,     0,     0,     0,
      25,    26,     0,    95,     2,     3,     0,     0,     0,    29,
      96,    30,     0,    31,   229,     0,     0,     0,    34,     0,
       0,     0,     0,     0,    96,     5,     6,     0,     0,     7,
       8,     0,     9,     0,    10,    11,     0,     0,     0,     5,
       6,     0,     0,     7,     8,     0,     9,     0,    10,    11,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    25,    26,     0,    95,     2,     3,     0,     0,
       0,    29,   345,    30,     0,    31,    25,    26,     0,     0,
      34,     0,     0,     0,     0,    29,    96,    30,     0,    31,
     347,     0,     0,     0,    34,     0,     0,     0,     0,     0,
       0,     5,     6,     0,     0,     7,     8,     0,     9,     0,
      10,    11,     0,     0,     0,     0,     0,     0,   148,     0,
       0,     0,     2,     3,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,     0,     0,    25,    26,
       0,     0,     4,     0,     0,     0,     0,    29,     0,    30,
       0,    31,     0,     0,     0,     0,    34,     5,     6,     0,
       0,     7,     8,     0,     9,     0,    10,    11,    12,    13,
      14,    15,     0,    16,     0,     0,    17,     0,     0,    18,
      19,    20,    21,     0,    22,     0,    23,    24,     2,     3,
       0,     0,     0,     0,    25,    26,     0,     0,     0,  -176,
       0,     0,    28,    29,     0,    30,     0,    31,     4,     0,
     163,   164,    34,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     5,     6,     0,     0,     7,     8,     0,
       9,     0,    10,    11,    12,    13,    14,    15,     0,    16,
       0,     0,    17,     0,     0,    18,    19,    20,    21,     0,
      22,     0,    23,    24,     0,   184,     2,     3,     0,     0,
      25,    26,     0,     0,     0,  -176,     0,     0,    28,    29,
       0,    30,     0,    31,     0,     0,     4,     0,    34,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     5,     6,     0,     0,     7,     8,     0,     9,     0,
      10,    11,    12,    13,    14,    15,     0,    16,     0,     0,
      17,     0,     0,    18,    19,    20,    21,     0,    22,     0,
      23,    24,     2,     3,     0,     0,     0,     0,    25,    26,
       0,     0,     0,  -176,     0,     0,    28,    29,     0,    30,
       0,    31,     4,     0,     0,     0,    34,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     5,     6,     0,
       0,     7,     8,     0,     9,     0,    10,    11,    12,    13,
      14,    15,     0,    16,     0,     0,    17,     0,     0,    18,
      19,    20,    21,     0,    22,     0,    23,    24,     2,     3,
       0,     0,     0,     0,    25,    26,     0,     0,     0,     0,
       0,     0,    28,    29,     0,    30,     0,    31,     4,     2,
       3,     0,    34,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     5,     6,     0,     0,     7,     8,     4,
       9,     0,    10,    11,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     5,     6,     0,     0,     7,     8,
       0,     9,     0,    10,    11,     0,     0,     0,     0,     0,
      25,    26,     0,     0,     0,     2,     3,     0,     0,    29,
       0,    30,     0,    31,     0,     0,     0,     0,    72,     0,
       0,    25,    26,     0,     0,     4,     2,     3,     0,     0,
      29,     0,    30,     0,    31,     0,     0,     0,     0,    34,
       5,     6,     0,     0,     7,     8,     4,     9,     0,    10,
      11,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     5,     6,     0,     0,     7,     8,     0,     9,     0,
      10,    11,     0,     0,     0,     0,     0,    25,    26,     0,
       0,     0,   219,   220,     0,     0,   165,     0,    30,     0,
      31,     0,     0,     0,     0,    72,     0,     0,    25,    26,
       0,     0,   221,   117,   118,   119,   120,   168,     0,    30,
       0,    31,     0,     0,     0,     0,    72,   222,   223,     0,
       0,     7,     8,     0,     9,     0,    10,    11,     0,     0,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,     0,   119,   120,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    25,    26,     0,     0,     0,     0,
       0,     0,     0,    29,     0,    30,     0,    31,   121,   122,
     123,   124,    72,     0,   127,   128,   129,   130,   131,   132,
       0,     0,     0,     0,   133,  -115,     0,     0,   134,     0,
     135,  -115,  -115,  -115,  -115,  -115,  -115,  -115,  -115,  -115,
    -115,  -115,  -115,   138,   139,   140,   141,     0,   142,   143,
     144,   145,   146,   147,     0,     0,     0,     0,     0,     0,
       0,     0,   133,   321,     0,     0,   134,     0,   135,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   323,     0,     0,     0,     0,     0,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160
};

static const yytype_int16 yycheck[] =
{
       0,   187,   170,    97,     0,    29,    30,    31,   176,    34,
      12,    13,    14,    15,    16,    17,    88,   108,    90,    21,
      22,     1,    31,    23,    24,    40,   196,   401,     3,    40,
      41,   131,   132,    47,    47,    47,   108,    47,   175,   133,
     134,    48,    46,   180,   181,    25,    93,    94,    47,    46,
      89,    79,    80,    48,    84,    94,   468,    81,   132,    83,
      84,    25,    48,    47,    25,    67,    96,    47,    80,    81,
      80,    81,     0,    97,    88,    86,    89,    84,    88,    90,
     492,    92,    86,    47,   225,   226,    47,    82,    88,    86,
      90,    96,    92,     4,    93,    94,    82,    96,    87,    71,
     115,    91,    71,    93,    93,   196,    87,    87,   108,   133,
     134,    86,    93,   113,    86,   489,    82,   113,   288,   219,
     220,   221,   222,   223,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   165,    89,   309,
     168,   165,    93,    48,   168,   219,   220,   221,   222,   223,
       3,    48,    93,    94,   322,    96,   324,   298,   299,   300,
     301,   302,   162,    68,    96,    38,    39,    40,    41,    42,
      43,   195,   196,    87,   198,   175,    73,    74,    75,    76,
     180,   181,    91,   320,    86,    94,   195,   189,   325,   198,
     327,    93,    94,    93,    96,    87,     3,   288,    85,    86,
       3,    93,    48,    93,    94,   296,   206,    91,   232,    93,
     206,   305,   306,    86,    49,    50,    48,    90,   309,    92,
      84,   358,    93,    94,   296,    96,   394,    73,    74,    75,
      76,   368,   449,   450,   451,   452,    93,   262,    57,    58,
      87,   265,    21,   267,    23,    24,   414,    26,    27,    28,
      29,    30,    31,   390,    93,   392,    60,    61,   282,   259,
     397,   398,   399,    23,   288,    92,    26,    27,    28,    29,
      30,    31,   409,   275,   276,    26,    27,    28,    29,    30,
      31,   305,   306,    92,   284,   309,     3,   473,   284,     3,
     427,    55,   179,    47,    48,    66,   296,   321,    86,   323,
     187,    84,   326,   190,    47,    48,    47,    48,    48,   446,
      87,   448,   312,   313,    47,    48,    48,   317,    47,    48,
     320,    87,     3,    93,    26,   325,   350,   327,   330,   331,
      87,    23,    48,    48,   336,    87,   338,    48,    48,    48,
      79,   341,   342,   367,    21,    22,    23,    24,    48,    26,
      27,    28,    29,    30,    31,   355,    23,    24,   358,    26,
      27,    28,    29,    30,    31,     3,    86,   391,   368,    48,
       3,    24,   396,   333,    87,   262,   376,   333,    86,   296,
     317,   268,   480,   403,   385,   444,   273,   453,   490,   453,
     390,   512,   392,   492,   418,   453,   453,   397,   398,   399,
     496,   498,    37,   403,    -1,    37,    -1,    -1,    -1,   409,
      -1,    -1,     2,     3,     4,     5,     6,    -1,    -1,     4,
       5,     6,    -1,    -1,    -1,    -1,    -1,   427,    -1,    -1,
      -1,   318,    -1,   435,   436,   437,   438,    -1,    -1,    -1,
      25,   328,   329,    -1,    -1,    -1,   446,    -1,   448,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    44,
      45,    -1,    47,    -1,    49,    50,    -1,   467,    -1,   469,
     470,    -1,    -1,   497,   361,   499,   363,    -1,    -1,    -1,
     480,    -1,   369,   370,    -1,    -1,    -1,   374,   375,    -1,
     490,    -1,    77,    78,    -1,    -1,   496,    -1,   498,    -1,
      -1,    86,   389,    88,    -1,    90,    96,    -1,    93,    -1,
      95,    -1,   512,    -1,    -1,    -1,    -1,    -1,   405,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   413,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,    -1,   425,    -1,
      -1,   428,    -1,    -1,    -1,    -1,    -1,   137,    -1,    -1,
      -1,    -1,   439,    -1,    -1,     1,    -1,    -1,    -1,     5,
       6,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     457,   458,   459,   460,    -1,    -1,    -1,    -1,    -1,    25,
      -1,    -1,    -1,    -1,    -1,    -1,   473,    -1,    -1,    -1,
      -1,    -1,   479,    -1,    40,    41,   483,    -1,    44,    45,
     487,    47,    -1,    49,    50,    51,    52,    53,    54,    -1,
      56,    -1,    -1,    59,    -1,    -1,    62,    63,    64,    65,
      -1,    67,    -1,    69,    70,     5,     6,    -1,    -1,    -1,
      -1,    77,    78,    -1,    -1,    -1,    82,    83,    84,    85,
      86,    -1,    88,    -1,    90,    25,    -1,    93,    94,    95,
      96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    -1,    44,    45,    -1,    47,    -1,    49,
      50,    51,    52,    53,    54,    -1,    56,    -1,    -1,    59,
      79,    80,    62,    63,    64,    65,    -1,    67,    -1,    69,
      70,     4,     5,     6,    -1,    -1,    -1,    77,    78,    -1,
      -1,    -1,    82,    -1,    -1,    85,    86,    -1,    88,    -1,
      90,    -1,    25,    93,    94,    95,    96,     4,     5,     6,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
      -1,    44,    45,    -1,    47,    -1,    49,    50,    25,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,    -1,
      -1,    -1,    -1,    40,    41,    -1,    -1,    44,    45,    -1,
      47,    -1,    49,    50,    77,    78,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    86,    87,    88,    -1,    90,    -1,     4,
       5,     6,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      77,    78,    -1,     4,     5,     6,    -1,    -1,    -1,    86,
      25,    88,    -1,    90,    91,    -1,    -1,    -1,    95,    -1,
      -1,    -1,    -1,    -1,    25,    40,    41,    -1,    -1,    44,
      45,    -1,    47,    -1,    49,    50,    -1,    -1,    -1,    40,
      41,    -1,    -1,    44,    45,    -1,    47,    -1,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    77,    78,    -1,     4,     5,     6,    -1,    -1,
      -1,    86,    87,    88,    -1,    90,    77,    78,    -1,    -1,
      95,    -1,    -1,    -1,    -1,    86,    25,    88,    -1,    90,
      91,    -1,    -1,    -1,    95,    -1,    -1,    -1,    -1,    -1,
      -1,    40,    41,    -1,    -1,    44,    45,    -1,    47,    -1,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,
      -1,    -1,     5,     6,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    -1,    -1,    77,    78,
      -1,    -1,    25,    -1,    -1,    -1,    -1,    86,    -1,    88,
      -1,    90,    -1,    -1,    -1,    -1,    95,    40,    41,    -1,
      -1,    44,    45,    -1,    47,    -1,    49,    50,    51,    52,
      53,    54,    -1,    56,    -1,    -1,    59,    -1,    -1,    62,
      63,    64,    65,    -1,    67,    -1,    69,    70,     5,     6,
      -1,    -1,    -1,    -1,    77,    78,    -1,    -1,    -1,    82,
      -1,    -1,    85,    86,    -1,    88,    -1,    90,    25,    -1,
      93,    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    40,    41,    -1,    -1,    44,    45,    -1,
      47,    -1,    49,    50,    51,    52,    53,    54,    -1,    56,
      -1,    -1,    59,    -1,    -1,    62,    63,    64,    65,    -1,
      67,    -1,    69,    70,    -1,    72,     5,     6,    -1,    -1,
      77,    78,    -1,    -1,    -1,    82,    -1,    -1,    85,    86,
      -1,    88,    -1,    90,    -1,    -1,    25,    -1,    95,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    40,    41,    -1,    -1,    44,    45,    -1,    47,    -1,
      49,    50,    51,    52,    53,    54,    -1,    56,    -1,    -1,
      59,    -1,    -1,    62,    63,    64,    65,    -1,    67,    -1,
      69,    70,     5,     6,    -1,    -1,    -1,    -1,    77,    78,
      -1,    -1,    -1,    82,    -1,    -1,    85,    86,    -1,    88,
      -1,    90,    25,    -1,    -1,    -1,    95,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
      -1,    44,    45,    -1,    47,    -1,    49,    50,    51,    52,
      53,    54,    -1,    56,    -1,    -1,    59,    -1,    -1,    62,
      63,    64,    65,    -1,    67,    -1,    69,    70,     5,     6,
      -1,    -1,    -1,    -1,    77,    78,    -1,    -1,    -1,    -1,
      -1,    -1,    85,    86,    -1,    88,    -1,    90,    25,     5,
       6,    -1,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    40,    41,    -1,    -1,    44,    45,    25,
      47,    -1,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    44,    45,
      -1,    47,    -1,    49,    50,    -1,    -1,    -1,    -1,    -1,
      77,    78,    -1,    -1,    -1,     5,     6,    -1,    -1,    86,
      -1,    88,    -1,    90,    -1,    -1,    -1,    -1,    95,    -1,
      -1,    77,    78,    -1,    -1,    25,     5,     6,    -1,    -1,
      86,    -1,    88,    -1,    90,    -1,    -1,    -1,    -1,    95,
      40,    41,    -1,    -1,    44,    45,    25,    47,    -1,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    40,    41,    -1,    -1,    44,    45,    -1,    47,    -1,
      49,    50,    -1,    -1,    -1,    -1,    -1,    77,    78,    -1,
      -1,    -1,     5,     6,    -1,    -1,    86,    -1,    88,    -1,
      90,    -1,    -1,    -1,    -1,    95,    -1,    -1,    77,    78,
      -1,    -1,    25,     5,     6,     7,     8,    86,    -1,    88,
      -1,    90,    -1,    -1,    -1,    -1,    95,    40,    41,    -1,
      -1,    44,    45,    -1,    47,    -1,    49,    50,    -1,    -1,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    -1,     7,     8,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    77,    78,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    86,    -1,    88,    -1,    90,    32,    33,
      34,    35,    95,    -1,    38,    39,    40,    41,    42,    43,
      -1,    -1,    -1,    -1,    86,     3,    -1,    -1,    90,    -1,
      92,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    -1,    26,    27,
      28,    29,    30,    31,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    86,     3,    -1,    -1,    90,    -1,    92,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,     3,    -1,    -1,    -1,    -1,    -1,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20
};

  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
static const yytype_uint8 yystos[] =
{
       0,     1,     5,     6,    25,    40,    41,    44,    45,    47,
      49,    50,    51,    52,    53,    54,    56,    59,    62,    63,
      64,    65,    67,    69,    70,    77,    78,    83,    85,    86,
      88,    90,    93,    94,    95,    99,   100,   101,   105,   106,
     108,   109,   110,   111,   112,   113,   115,   118,   119,   120,
     125,   127,   128,   129,   130,   131,   132,   133,   134,   138,
     139,   144,   149,   150,   151,   152,   161,   162,   163,   196,
     197,   198,    95,   108,   125,   125,   125,   125,   125,   195,
     195,   195,   195,   195,   195,   195,   195,   108,   135,   137,
     135,    96,   199,   200,   132,     4,    25,    93,   114,   117,
     121,   122,   123,   132,   116,   117,    71,    86,   153,   155,
       0,    84,    96,   197,   198,   107,   111,     5,     6,     7,
       8,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    86,    90,    92,   124,     4,    21,    22,
      23,    24,    26,    27,    28,    29,    30,    31,     3,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    82,   195,    93,    94,    86,   129,   130,    86,   130,
     132,    93,    94,    96,   201,   202,   132,   140,   141,   132,
     202,   202,     3,   137,    72,   102,   103,   104,   105,   168,
     169,    96,    87,   123,    89,    94,    93,    91,    94,     1,
      25,   122,   137,   156,   157,   158,   194,   105,   111,   125,
     125,   125,   125,   125,   125,   125,   125,   125,   125,     5,
       6,    25,    40,    41,   120,   126,   126,    87,   123,    91,
     123,    46,    86,   125,   129,   129,   129,   129,   129,   129,
     129,   129,   129,   129,   132,   132,   132,   132,   132,   132,
     132,   132,   132,   132,   132,   132,   132,    80,    81,    88,
     108,   159,   164,   165,   130,     3,   130,     3,   194,    93,
      94,    96,   102,   194,    48,    57,    58,   142,   143,   202,
     102,   102,   136,    84,   201,   202,   195,   202,    93,   117,
     121,   122,   132,   117,    87,   154,    93,   105,   126,   126,
     126,   126,   126,    40,    41,    86,    90,   124,    87,    93,
      91,   132,    92,    92,    89,   108,   160,     3,   155,   166,
     202,     3,   132,     3,   132,   202,    55,   202,   195,   195,
      60,    61,   145,   146,   147,   148,    66,    48,    68,   132,
     105,    86,   170,    84,   158,    87,   123,    91,   123,    46,
      86,    87,   108,   108,    89,    93,   108,   165,   202,   102,
     132,   194,   132,   194,   102,   132,   102,   202,   202,   195,
     195,    48,   147,   148,   195,   195,    25,   108,   171,   172,
     108,    87,    91,   132,   108,   102,    48,    84,   167,    87,
     202,    93,   202,    48,   132,   102,   202,   202,   202,   202,
     108,     3,    87,    93,    26,   173,   174,    87,   167,   202,
     102,   132,   102,   194,   132,   102,   102,   102,   136,   172,
     175,   202,    23,   102,    48,    87,    48,   202,   194,    48,
      48,   132,    79,   177,    48,    73,    74,    75,    76,   178,
     179,   182,   188,   191,   176,    48,   202,   102,   202,   195,
     195,   195,   195,   202,   177,   102,   102,   170,   170,   170,
     170,    48,   179,   182,   188,   191,    48,   202,   202,   202,
     202,    48,   108,   180,   181,    48,   163,   184,   186,   187,
     195,    48,   108,   189,   190,    48,   108,   192,   193,     3,
     201,   202,   202,   108,   159,   183,   202,    86,   202,   136,
     181,    48,    48,   186,   155,     3,    48,   190,   132,    48,
     193,   132,   185,    87,   108,   183
};

  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint8 yyr1[] =
{
       0,    98,    99,    99,    99,   100,   100,   101,   101,   102,
     102,   103,   104,   104,   105,   105,   105,   106,   107,   107,
     108,   109,   110,   111,   111,   112,   112,   112,   113,   114,
     114,   115,   116,   116,   117,   117,   117,   117,   117,   117,
     118,   119,   120,   120,   120,   120,   120,   120,   120,   120,
     121,   122,   123,   123,   123,   123,   123,   123,   124,   125,
     125,   125,   125,   125,   125,   125,   125,   125,   125,   125,
     125,   125,   125,   125,   125,   125,   125,   125,   125,   125,
     125,   125,   125,   125,   125,   125,   125,   126,   126,   126,
     126,   126,   126,   126,   126,   126,   126,   126,   126,   126,
     126,   127,   128,   128,   129,   129,   129,   129,   129,   129,
     129,   129,   129,   129,   129,   130,   131,   131,   131,   131,
     131,   131,   131,   131,   131,   131,   131,   131,   131,   132,
     132,   132,   133,   133,   133,   133,   133,   133,   133,   134,
     134,   135,   135,   136,   137,   137,   138,   138,   139,   140,
     140,   141,   141,   142,   143,   144,   145,   145,   145,   145,
     146,   146,   147,   148,   149,   149,   149,   149,   149,   149,
     150,   150,   150,   151,   151,   151,   152,   153,   154,   155,
     155,   156,   156,   157,   157,   158,   158,   159,   159,   159,
     160,   160,   161,   161,   162,   163,   163,   164,   164,   164,
     165,   166,   166,   167,   167,   168,   169,   169,   170,   170,
     171,   171,   172,   172,   172,   173,   173,   175,   174,   176,
     174,   177,   178,   178,   178,   178,   178,   178,   178,   178,
     179,   179,   180,   180,   181,   181,   182,   182,   183,   183,
     184,   185,   184,   186,   186,   187,   187,   188,   188,   189,
     189,   190,   191,   191,   192,   192,   193,   194,   195,   196,
     196,   197,   197,   197,   197,   198,   198,   199,   199,   200,
     200,   201,   201,   201,   201,   201,   201,   202,   202
};

  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     2,     2,     1,     1,     2,     1,     3,     0,
       1,     2,     1,     3,     1,     1,     1,     2,     1,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     3,     1,
       3,     3,     1,     3,     0,     1,     1,     2,     2,     3,
       2,     4,     1,     1,     1,     1,     1,     1,     1,     3,
       1,     1,     1,     1,     1,     3,     3,     3,     1,     1,
       2,     2,     3,     4,     3,     4,     2,     2,     3,     5,
       2,     2,     2,     2,     2,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     1,     2,     2,
       3,     4,     3,     4,     3,     5,     2,     2,     2,     2,
       2,     1,     1,     3,     1,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     1,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       2,     1,     2,     0,     1,     4,     1,     1,     4,     1,
       2,     4,     2,     7,     4,     6,     0,     1,     1,     2,
       1,     2,     7,     4,     7,     6,     9,    10,     9,    12,
       1,     1,     1,     9,     9,     5,     0,     1,     1,     3,
       2,     0,     1,     1,     3,     1,     1,     2,     1,     3,
       1,     3,     4,     5,     2,     3,     5,     1,     3,     3,
       2,     4,     3,     1,     1,     1,     9,     7,     0,     3,
       1,     3,     1,     4,     2,     0,     1,     0,     3,     0,
       4,     1,     1,     1,     1,     1,     3,     3,     3,     3,
       7,     5,     1,     3,     1,     4,     7,     5,     1,     2,
       2,     0,     5,     1,     1,     1,     3,     7,     5,     1,
       3,     1,     7,     5,     1,     3,     4,     0,     0,     1,
       1,     1,     1,     2,     2,     0,     1,     0,     1,     1,
       2,     1,     1,     1,     2,     2,     2,     0,     1
};


#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)
#define YYEMPTY         (-2)
#define YYEOF           0

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                  \
do                                                              \
  if (yychar == YYEMPTY)                                        \
    {                                                           \
      yychar = (Token);                                         \
      yylval = (Value);                                         \
      YYPOPSTACK (yylen);                                       \
      yystate = *yyssp;                                         \
      goto yybackup;                                            \
    }                                                           \
  else                                                          \
    {                                                           \
      yyerror (parser, YY_("syntax error: cannot back up")); \
      YYERROR;                                                  \
    }                                                           \
while (0)

/* Error token number */
#define YYTERROR        1
#define YYERRCODE       256



/* Enable debugging if requested.  */
#if OCTAVE_DEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)

/* This macro is provided for backward compatibility. */
#ifndef YY_LOCATION_PRINT
# define YY_LOCATION_PRINT(File, Loc) ((void) 0)
#endif


# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Type, Value, parser); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*----------------------------------------.
| Print this symbol's value on YYOUTPUT.  |
`----------------------------------------*/

static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, octave::base_parser& parser)
{
  FILE *yyo = yyoutput;
  YYUSE (yyo);
  YYUSE (parser);
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# endif
  YYUSE (yytype);
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, octave::base_parser& parser)
{
  YYFPRINTF (yyoutput, "%s %s (",
             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep, parser);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, int yyrule, octave::base_parser& parser)
{
  unsigned long int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       yystos[yyssp[yyi + 1 - yynrhs]],
                       &(yyvsp[(yyi + 1) - (yynrhs)])
                                              , parser);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, Rule, parser); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !OCTAVE_DEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !OCTAVE_DEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
yystrlen (const char *yystr)
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            /* Fall through.  */
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
{
  YYSIZE_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULLPTR;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
                  if (! (yysize <= yysize1
                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                    return 2;
                  yysize = yysize1;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
      return 2;
    yysize = yysize1;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, octave::base_parser& parser)
{
  YYUSE (yyvaluep);
  YYUSE (parser);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  switch (yytype)
    {
          case 3: /* '='  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 1855 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 4: /* ':'  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 1861 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 5: /* '-'  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 1867 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 6: /* '+'  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 1873 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 7: /* '*'  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 1879 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 8: /* '/'  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 1885 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 9: /* ADD_EQ  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 1891 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 10: /* SUB_EQ  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 1897 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 11: /* MUL_EQ  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 1903 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 12: /* DIV_EQ  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 1909 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 13: /* LEFTDIV_EQ  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 1915 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 14: /* POW_EQ  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 1921 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 15: /* EMUL_EQ  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 1927 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 16: /* EDIV_EQ  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 1933 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 17: /* ELEFTDIV_EQ  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 1939 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 18: /* EPOW_EQ  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 1945 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 19: /* AND_EQ  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 1951 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 20: /* OR_EQ  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 1957 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 21: /* EXPR_AND_AND  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 1963 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 22: /* EXPR_OR_OR  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 1969 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 23: /* EXPR_AND  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 1975 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 24: /* EXPR_OR  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 1981 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 25: /* EXPR_NOT  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 1987 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 26: /* EXPR_LT  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 1993 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 27: /* EXPR_LE  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 1999 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 28: /* EXPR_EQ  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2005 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 29: /* EXPR_NE  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2011 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 30: /* EXPR_GE  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2017 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 31: /* EXPR_GT  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2023 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 32: /* LEFTDIV  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2029 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 33: /* EMUL  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2035 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 34: /* EDIV  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2041 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 35: /* ELEFTDIV  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2047 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 36: /* EPLUS  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2053 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 37: /* EMINUS  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2059 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 38: /* HERMITIAN  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2065 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 39: /* TRANSPOSE  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2071 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 40: /* PLUS_PLUS  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2077 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 41: /* MINUS_MINUS  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2083 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 42: /* POW  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2089 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 43: /* EPOW  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2095 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 44: /* NUM  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2101 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 45: /* IMAG_NUM  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2107 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 46: /* STRUCT_ELT  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2113 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 47: /* NAME  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2119 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 48: /* END  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2125 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 49: /* DQ_STRING  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2131 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 50: /* SQ_STRING  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2137 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 51: /* FOR  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2143 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 52: /* PARFOR  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2149 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 53: /* WHILE  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2155 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 54: /* DO  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2161 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 55: /* UNTIL  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2167 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 56: /* IF  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2173 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 57: /* ELSEIF  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2179 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 58: /* ELSE  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2185 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 59: /* SWITCH  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2191 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 60: /* CASE  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2197 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 61: /* OTHERWISE  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2203 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 62: /* BREAK  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2209 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 63: /* CONTINUE  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2215 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 64: /* FUNC_RET  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2221 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 65: /* UNWIND  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2227 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 66: /* CLEANUP  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2233 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 67: /* TRY  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2239 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 68: /* CATCH  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2245 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 69: /* GLOBAL  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2251 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 70: /* PERSISTENT  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2257 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 71: /* FCN_HANDLE  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2263 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 72: /* CLASSDEF  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2269 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 73: /* PROPERTIES  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2275 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 74: /* METHODS  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2281 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 75: /* EVENTS  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2287 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 76: /* ENUMERATION  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2293 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 77: /* METAQUERY  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2299 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 78: /* SUPERCLASSREF  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2305 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 79: /* FQ_IDENT  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2311 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 80: /* GET  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2317 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 81: /* SET  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2323 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 82: /* FCN  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2329 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 83: /* LEXICAL_ERROR  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2335 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 97: /* UNARY  */
#line 323 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2341 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 99: /* input  */
#line 325 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_type); }
#line 2347 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 100: /* simple_list  */
#line 350 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_statement_list_type); }
#line 2353 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 101: /* simple_list1  */
#line 350 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_statement_list_type); }
#line 2359 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 102: /* opt_list  */
#line 350 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_statement_list_type); }
#line 2365 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 103: /* list  */
#line 350 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_statement_list_type); }
#line 2371 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 104: /* list1  */
#line 350 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_statement_list_type); }
#line 2377 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 105: /* statement  */
#line 349 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_statement_type); }
#line 2383 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 106: /* word_list_cmd  */
#line 335 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_index_expression_type); }
#line 2389 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 107: /* word_list  */
#line 337 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_argument_list_type); }
#line 2395 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 108: /* identifier  */
#line 334 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_identifier_type); }
#line 2401 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 109: /* superclass_identifier  */
#line 331 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_funcall_type); }
#line 2407 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 110: /* meta_identifier  */
#line 331 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_funcall_type); }
#line 2413 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 111: /* string  */
#line 329 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_constant_type); }
#line 2419 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 112: /* constant  */
#line 329 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_constant_type); }
#line 2425 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 113: /* matrix  */
#line 328 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_expression_type); }
#line 2431 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 114: /* matrix_rows  */
#line 326 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_matrix_type); }
#line 2437 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 115: /* cell  */
#line 328 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_expression_type); }
#line 2443 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 116: /* cell_rows  */
#line 327 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_cell_type); }
#line 2449 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 117: /* cell_or_matrix_row  */
#line 337 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_argument_list_type); }
#line 2455 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 118: /* fcn_handle  */
#line 330 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_fcn_handle_type); }
#line 2461 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 119: /* anon_fcn_handle  */
#line 333 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_anon_fcn_handle_type); }
#line 2467 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 120: /* primary_expr  */
#line 328 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_expression_type); }
#line 2473 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 121: /* magic_colon  */
#line 329 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_constant_type); }
#line 2479 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 122: /* magic_tilde  */
#line 334 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_identifier_type); }
#line 2485 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 123: /* arg_list  */
#line 337 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_argument_list_type); }
#line 2491 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 125: /* oper_expr  */
#line 328 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_expression_type); }
#line 2497 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 126: /* power_expr  */
#line 328 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_expression_type); }
#line 2503 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 127: /* colon_expr  */
#line 328 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_expression_type); }
#line 2509 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 128: /* colon_expr1  */
#line 336 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_colon_expression_type); }
#line 2515 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 129: /* simple_expr  */
#line 328 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_expression_type); }
#line 2521 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 130: /* assign_lhs  */
#line 337 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_argument_list_type); }
#line 2527 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 131: /* assign_expr  */
#line 328 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_expression_type); }
#line 2533 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 132: /* expression  */
#line 328 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_expression_type); }
#line 2539 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 133: /* command  */
#line 339 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_command_type); }
#line 2545 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 134: /* declaration  */
#line 348 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_decl_command_type); }
#line 2551 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 135: /* decl1  */
#line 347 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_decl_init_list_type); }
#line 2557 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 137: /* decl2  */
#line 346 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_decl_elt_type); }
#line 2563 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 138: /* select_command  */
#line 339 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_command_type); }
#line 2569 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 139: /* if_command  */
#line 340 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_if_command_type); }
#line 2575 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 140: /* if_cmd_list  */
#line 342 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_if_command_list_type); }
#line 2581 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 141: /* if_cmd_list1  */
#line 342 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_if_command_list_type); }
#line 2587 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 142: /* elseif_clause  */
#line 341 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_if_clause_type); }
#line 2593 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 143: /* else_clause  */
#line 341 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_if_clause_type); }
#line 2599 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 144: /* switch_command  */
#line 343 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_switch_command_type); }
#line 2605 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 145: /* case_list  */
#line 345 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_switch_case_list_type); }
#line 2611 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 146: /* case_list1  */
#line 345 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_switch_case_list_type); }
#line 2617 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 147: /* switch_case  */
#line 344 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_switch_case_type); }
#line 2623 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 148: /* default_case  */
#line 344 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_switch_case_type); }
#line 2629 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 149: /* loop_command  */
#line 339 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_command_type); }
#line 2635 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 150: /* jump_command  */
#line 339 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_command_type); }
#line 2641 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 151: /* except_command  */
#line 339 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_command_type); }
#line 2647 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 155: /* param_list  */
#line 338 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_parameter_list_type); }
#line 2653 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 156: /* param_list1  */
#line 338 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_parameter_list_type); }
#line 2659 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 157: /* param_list2  */
#line 338 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_parameter_list_type); }
#line 2665 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 158: /* param_list_elt  */
#line 346 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_decl_elt_type); }
#line 2671 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 159: /* return_list  */
#line 338 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_parameter_list_type); }
#line 2677 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 160: /* return_list1  */
#line 338 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_parameter_list_type); }
#line 2683 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 161: /* file  */
#line 339 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_command_type); }
#line 2689 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 162: /* function_beg  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2695 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 163: /* function  */
#line 332 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_function_def_type); }
#line 2701 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 164: /* fcn_name  */
#line 334 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_identifier_type); }
#line 2707 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 165: /* function1  */
#line 351 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).octave_user_function_type); }
#line 2713 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 166: /* function2  */
#line 351 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).octave_user_function_type); }
#line 2719 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 167: /* function_end  */
#line 349 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_statement_type); }
#line 2725 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 168: /* classdef_beg  */
#line 320 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2731 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 169: /* classdef  */
#line 353 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_classdef_type); }
#line 2737 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 170: /* opt_attr_list  */
#line 355 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_classdef_attribute_list_type); }
#line 2743 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 171: /* attr_list  */
#line 355 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_classdef_attribute_list_type); }
#line 2749 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 172: /* attr  */
#line 354 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_classdef_attribute_type); }
#line 2755 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 173: /* opt_superclass_list  */
#line 357 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_classdef_superclass_list_type); }
#line 2761 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 174: /* superclass_list  */
#line 357 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_classdef_superclass_list_type); }
#line 2767 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 177: /* superclass  */
#line 356 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_classdef_superclass_type); }
#line 2773 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 178: /* class_body  */
#line 358 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_classdef_body_type); }
#line 2779 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 179: /* properties_block  */
#line 361 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_classdef_properties_block_type); }
#line 2785 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 180: /* property_list  */
#line 360 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_classdef_property_list_type); }
#line 2791 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 181: /* class_property  */
#line 359 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_classdef_property_type); }
#line 2797 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 182: /* methods_block  */
#line 363 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_classdef_methods_block_type); }
#line 2803 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 183: /* method_decl1  */
#line 351 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).octave_user_function_type); }
#line 2809 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 184: /* method_decl  */
#line 332 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_function_def_type); }
#line 2815 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 186: /* method  */
#line 332 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_function_def_type); }
#line 2821 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 187: /* methods_list  */
#line 362 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_classdef_methods_list_type); }
#line 2827 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 188: /* events_block  */
#line 366 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_classdef_events_block_type); }
#line 2833 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 189: /* events_list  */
#line 365 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_classdef_events_list_type); }
#line 2839 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 190: /* class_event  */
#line 364 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_classdef_event_type); }
#line 2845 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 191: /* enum_block  */
#line 369 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_classdef_enum_block_type); }
#line 2851 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 192: /* enum_list  */
#line 368 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_classdef_enum_list_type); }
#line 2857 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 193: /* class_enum  */
#line 367 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { delete ((*yyvaluep).tree_classdef_enum_type); }
#line 2863 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 195: /* stash_comment  */
#line 322 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2869 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 197: /* sep_no_nl  */
#line 321 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2875 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 198: /* opt_sep_no_nl  */
#line 321 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2881 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 199: /* opt_nl  */
#line 321 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2887 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 200: /* nl  */
#line 321 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2893 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 201: /* sep  */
#line 321 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2899 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;

    case 202: /* opt_sep  */
#line 321 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1257  */
      { }
#line 2905 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1257  */
        break;


      default:
        break;
    }
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}



struct yypstate
  {
    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;
    /* Used to determine if this is the first time this instance has
       been used.  */
    int yynew;
  };

int
yyparse (octave::base_parser& parser)
{
  return yypull_parse (YY_NULLPTR, parser);
}

int
yypull_parse (yypstate *yyps, octave::base_parser& parser)
{
  int yystatus;
  yypstate *yyps_local;
  int yychar;
  YYSTYPE yylval;
  if (yyps)
    yyps_local = yyps;
  else
    {
      yyps_local = yypstate_new ();
      if (!yyps_local)
        {
          yyerror (parser, YY_("memory exhausted"));
          return 2;
        }
    }
  do {
    yychar = yylex (&yylval, scanner);
    yystatus =
      yypush_parse (yyps_local, yychar, &yylval, parser);
  } while (yystatus == YYPUSH_MORE);
  if (!yyps)
    yypstate_delete (yyps_local);
  return yystatus;
}

/* Initialize the parser data structure.  */
yypstate *
yypstate_new (void)
{
  yypstate *yyps;
  yyps = (yypstate *) malloc (sizeof *yyps);
  if (!yyps)
    return YY_NULLPTR;
  yyps->yynew = 1;
  return yyps;
}

void
yypstate_delete (yypstate *yyps)
{
#ifndef yyoverflow
  /* If the stack was reallocated but the parse did not complete, then the
     stack still needs to be freed.  */
  if (!yyps->yynew && yyps->yyss != yyps->yyssa)
    YYSTACK_FREE (yyps->yyss);
#endif
  free (yyps);
}

#define octave_nerrs yyps->octave_nerrs
#define yystate yyps->yystate
#define yyerrstatus yyps->yyerrstatus
#define yyssa yyps->yyssa
#define yyss yyps->yyss
#define yyssp yyps->yyssp
#define yyvsa yyps->yyvsa
#define yyvs yyps->yyvs
#define yyvsp yyps->yyvsp
#define yystacksize yyps->yystacksize


/*---------------.
| yypush_parse.  |
`---------------*/

int
yypush_parse (yypstate *yyps, int yypushed_char, YYSTYPE const *yypushed_val, octave::base_parser& parser)
{
/* The lookahead symbol.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  if (!yyps->yynew)
    {
      yyn = yypact[yystate];
      goto yyread_pushed_token;
    }

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        YYSTYPE *yyvs1 = yyvs;
        yytype_int16 *yyss1 = yyss;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * sizeof (*yyssp),
                    &yyvs1, yysize * sizeof (*yyvsp),
                    &yystacksize);

        yyss = yyss1;
        yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yytype_int16 *yyss1 = yyss;
        union yyalloc *yyptr =
          (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
                  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      if (!yyps->yynew)
        {
          YYDPRINTF ((stderr, "Return for a new token:\n"));
          yyresult = YYPUSH_MORE;
          goto yypushreturn;
        }
      yyps->yynew = 0;
yyread_pushed_token:
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = yypushed_char;
      if (yypushed_val)
        yylval = *yypushed_val;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:
#line 390 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyval.tree_type) = 0;
                    parser.stmt_list = (yyvsp[-1].tree_statement_list_type);
                    YYACCEPT;
                  }
#line 3268 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 3:
#line 396 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyval.tree_type) = 0;
                    lexer.end_of_input = true;
                    parser.stmt_list = (yyvsp[-1].tree_statement_list_type);
                    YYACCEPT;
                  }
#line 3279 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 4:
#line 403 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyval.tree_type) = 0;
                    YYABORT;
                  }
#line 3288 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 5:
#line 410 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[0].punct_type));

                    (yyval.tree_statement_list_type) = 0;
                  }
#line 3298 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 6:
#line 416 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_statement_list_type) = parser.set_stmt_print_flag ((yyvsp[-1].tree_statement_list_type), (yyvsp[0].punct_type), false); }
#line 3304 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 7:
#line 420 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_statement_list_type) = parser.make_statement_list ((yyvsp[0].tree_statement_type)); }
#line 3310 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 8:
#line 422 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_statement_list_type) = parser.append_statement_list ((yyvsp[-2].tree_statement_list_type), (yyvsp[-1].punct_type), (yyvsp[0].tree_statement_type), false); }
#line 3316 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 9:
#line 426 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_statement_list_type) = new tree_statement_list (); }
#line 3322 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 10:
#line 428 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_statement_list_type) = (yyvsp[0].tree_statement_list_type); }
#line 3328 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 11:
#line 432 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_statement_list_type) = parser.set_stmt_print_flag ((yyvsp[-1].tree_statement_list_type), (yyvsp[0].punct_type), true); }
#line 3334 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 12:
#line 436 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_statement_list_type) = parser.make_statement_list ((yyvsp[0].tree_statement_type)); }
#line 3340 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 13:
#line 438 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_statement_list_type) = parser.append_statement_list ((yyvsp[-2].tree_statement_list_type), (yyvsp[-1].punct_type), (yyvsp[0].tree_statement_type), true); }
#line 3346 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 14:
#line 442 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_statement_type) = parser.make_statement ((yyvsp[0].tree_expression_type)); }
#line 3352 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 15:
#line 444 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_statement_type) = parser.make_statement ((yyvsp[0].tree_command_type)); }
#line 3358 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 16:
#line 446 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_statement_type) = parser.make_statement ((yyvsp[0].tree_index_expression_type)); }
#line 3364 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 17:
#line 458 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyval.tree_index_expression_type) = parser.make_index_expression ((yyvsp[-1].tree_identifier_type), (yyvsp[0].tree_argument_list_type), '(');
                    if (! (yyval.tree_index_expression_type))
                      {
                        // make_index_expression deleted $1 and $2.
                        YYABORT;
                      }
                  }
#line 3377 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 18:
#line 469 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_argument_list_type) = new tree_argument_list ((yyvsp[0].tree_constant_type)); }
#line 3383 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 19:
#line 471 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyvsp[-1].tree_argument_list_type)->append ((yyvsp[0].tree_constant_type));
                    (yyval.tree_argument_list_type) = (yyvsp[-1].tree_argument_list_type);
                  }
#line 3392 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 20:
#line 482 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    symbol_table::symbol_record *sr = (yyvsp[0].tok_val)->sym_rec ();
                    (yyval.tree_identifier_type) = new tree_identifier (*sr, (yyvsp[0].tok_val)->line (), (yyvsp[0].tok_val)->column ());
                  }
#line 3401 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 21:
#line 490 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    std::string method_nm = (yyvsp[0].tok_val)->superclass_method_name ();
                    std::string class_nm = (yyvsp[0].tok_val)->superclass_class_name ();

                    (yyval.tree_funcall_type) = parser.make_superclass_ref (method_nm, class_nm);
                  }
#line 3412 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 22:
#line 499 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    std::string class_nm = (yyvsp[0].tok_val)->text ();

                    (yyval.tree_funcall_type) = parser.make_meta_class_query (class_nm);
                  }
#line 3422 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 23:
#line 507 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_constant_type) = parser.make_constant (DQ_STRING, (yyvsp[0].tok_val)); }
#line 3428 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 24:
#line 509 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_constant_type) = parser.make_constant (SQ_STRING, (yyvsp[0].tok_val)); }
#line 3434 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 25:
#line 513 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_constant_type) = parser.make_constant (NUM, (yyvsp[0].tok_val)); }
#line 3440 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 26:
#line 515 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_constant_type) = parser.make_constant (IMAG_NUM, (yyvsp[0].tok_val)); }
#line 3446 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 27:
#line 517 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_constant_type) = (yyvsp[0].tree_constant_type); }
#line 3452 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 28:
#line 521 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.finish_matrix ((yyvsp[-1].tree_matrix_type)); }
#line 3458 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 29:
#line 525 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_matrix_type) = (yyvsp[0].tree_argument_list_type) ? new tree_matrix ((yyvsp[0].tree_argument_list_type)) : 0; }
#line 3464 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 30:
#line 527 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    if ((yyvsp[-2].tree_matrix_type))
                      {
                        if ((yyvsp[0].tree_argument_list_type))
                          (yyvsp[-2].tree_matrix_type)->append ((yyvsp[0].tree_argument_list_type));

                        (yyval.tree_matrix_type) = (yyvsp[-2].tree_matrix_type);
                      }
                    else
                      (yyval.tree_matrix_type) = (yyvsp[0].tree_argument_list_type) ? new tree_matrix ((yyvsp[0].tree_argument_list_type)) : 0;
                  }
#line 3480 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 31:
#line 541 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.finish_cell ((yyvsp[-1].tree_cell_type)); }
#line 3486 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 32:
#line 545 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_cell_type) = (yyvsp[0].tree_argument_list_type) ? new tree_cell ((yyvsp[0].tree_argument_list_type)) : 0; }
#line 3492 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 33:
#line 547 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    if ((yyvsp[-2].tree_cell_type))
                      {
                        if ((yyvsp[0].tree_argument_list_type))
                          (yyvsp[-2].tree_cell_type)->append ((yyvsp[0].tree_argument_list_type));

                        (yyval.tree_cell_type) = (yyvsp[-2].tree_cell_type);
                      }
                    else
                      (yyval.tree_cell_type) = (yyvsp[0].tree_argument_list_type) ? new tree_cell ((yyvsp[0].tree_argument_list_type)) : 0;
                  }
#line 3508 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 34:
#line 565 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_argument_list_type) = 0; }
#line 3514 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 35:
#line 567 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_argument_list_type) = 0; }
#line 3520 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 36:
#line 569 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_argument_list_type) = (yyvsp[0].tree_argument_list_type); }
#line 3526 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 37:
#line 571 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_argument_list_type) = (yyvsp[-1].tree_argument_list_type); }
#line 3532 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 38:
#line 573 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_argument_list_type) = (yyvsp[0].tree_argument_list_type); }
#line 3538 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 39:
#line 575 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_argument_list_type) = (yyvsp[-1].tree_argument_list_type); }
#line 3544 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 40:
#line 579 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyval.tree_fcn_handle_type) = parser.make_fcn_handle ((yyvsp[0].tok_val));
                    lexer.looking_at_function_handle--;
                  }
#line 3553 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 41:
#line 586 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyval.tree_anon_fcn_handle_type) = parser.make_anon_fcn_handle ((yyvsp[-2].tree_parameter_list_type), (yyvsp[0].tree_statement_type));
                    lexer.nesting_level.remove ();
                  }
#line 3562 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 42:
#line 593 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = (yyvsp[0].tree_identifier_type); }
#line 3568 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 43:
#line 595 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = (yyvsp[0].tree_constant_type); }
#line 3574 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 44:
#line 597 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = (yyvsp[0].tree_fcn_handle_type); }
#line 3580 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 45:
#line 599 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    lexer.looking_at_matrix_or_assign_lhs = false;
                    (yyval.tree_expression_type) = (yyvsp[0].tree_expression_type);
                  }
#line 3589 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 46:
#line 604 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = (yyvsp[0].tree_expression_type); }
#line 3595 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 47:
#line 606 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = (yyvsp[0].tree_funcall_type); }
#line 3601 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 48:
#line 608 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = (yyvsp[0].tree_funcall_type); }
#line 3607 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 49:
#line 610 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = (yyvsp[-1].tree_expression_type)->mark_in_parens (); }
#line 3613 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 50:
#line 614 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[0].tok_val));

                    octave_value tmp (octave_value::magic_colon_t);
                    (yyval.tree_constant_type) = new tree_constant (tmp);
                  }
#line 3624 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 51:
#line 623 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[0].tok_val));

                    (yyval.tree_identifier_type) = new tree_black_hole ();
                  }
#line 3634 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 52:
#line 631 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_argument_list_type) = new tree_argument_list ((yyvsp[0].tree_expression_type)); }
#line 3640 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 53:
#line 633 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_argument_list_type) = new tree_argument_list ((yyvsp[0].tree_constant_type)); }
#line 3646 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 54:
#line 635 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_argument_list_type) = new tree_argument_list ((yyvsp[0].tree_identifier_type)); }
#line 3652 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 55:
#line 637 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyvsp[-2].tree_argument_list_type)->append ((yyvsp[0].tree_constant_type));
                    (yyval.tree_argument_list_type) = (yyvsp[-2].tree_argument_list_type);
                  }
#line 3661 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 56:
#line 642 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyvsp[-2].tree_argument_list_type)->append ((yyvsp[0].tree_identifier_type));
                    (yyval.tree_argument_list_type) = (yyvsp[-2].tree_argument_list_type);
                  }
#line 3670 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 57:
#line 647 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyvsp[-2].tree_argument_list_type)->append ((yyvsp[0].tree_expression_type));
                    (yyval.tree_argument_list_type) = (yyvsp[-2].tree_argument_list_type);
                  }
#line 3679 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 58:
#line 654 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyval.dummy_type) = 0;
                    lexer.looking_at_indirect_ref = true;
                  }
#line 3688 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 59:
#line 661 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = (yyvsp[0].tree_expression_type); }
#line 3694 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 60:
#line 663 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_postfix_op (PLUS_PLUS, (yyvsp[-1].tree_expression_type), (yyvsp[0].tok_val)); }
#line 3700 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 61:
#line 665 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_postfix_op (MINUS_MINUS, (yyvsp[-1].tree_expression_type), (yyvsp[0].tok_val)); }
#line 3706 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 62:
#line 667 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyval.tree_expression_type) = parser.make_index_expression ((yyvsp[-2].tree_expression_type), 0, '(');
                    if (! (yyval.tree_expression_type))
                      {
                        // make_index_expression deleted $1.
                        YYABORT;
                      }
                  }
#line 3719 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 63:
#line 676 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyval.tree_expression_type) = parser.make_index_expression ((yyvsp[-3].tree_expression_type), (yyvsp[-1].tree_argument_list_type), '(');
                    if (! (yyval.tree_expression_type))
                      {
                        // make_index_expression deleted $1 and $3.
                        YYABORT;
                      }
                  }
#line 3732 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 64:
#line 685 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyval.tree_expression_type) = parser.make_index_expression ((yyvsp[-2].tree_expression_type), 0, '{');
                    if (! (yyval.tree_expression_type))
                      {
                        // make_index_expression deleted $1.
                        YYABORT;
                      }
                  }
#line 3745 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 65:
#line 694 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyval.tree_expression_type) = parser.make_index_expression ((yyvsp[-3].tree_expression_type), (yyvsp[-1].tree_argument_list_type), '{');
                    if (! (yyval.tree_expression_type))
                      {
                        // make_index_expression deleted $1 and $3.
                        YYABORT;
                      }
                  }
#line 3758 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 66:
#line 703 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_postfix_op (HERMITIAN, (yyvsp[-1].tree_expression_type), (yyvsp[0].tok_val)); }
#line 3764 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 67:
#line 705 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_postfix_op (TRANSPOSE, (yyvsp[-1].tree_expression_type), (yyvsp[0].tok_val)); }
#line 3770 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 68:
#line 707 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_indirect_ref ((yyvsp[-2].tree_expression_type), (yyvsp[0].tok_val)->text ()); }
#line 3776 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 69:
#line 709 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_indirect_ref ((yyvsp[-4].tree_expression_type), (yyvsp[-1].tree_expression_type)); }
#line 3782 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 70:
#line 711 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_prefix_op (PLUS_PLUS, (yyvsp[0].tree_expression_type), (yyvsp[-1].tok_val)); }
#line 3788 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 71:
#line 713 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_prefix_op (MINUS_MINUS, (yyvsp[0].tree_expression_type), (yyvsp[-1].tok_val)); }
#line 3794 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 72:
#line 715 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_prefix_op (EXPR_NOT, (yyvsp[0].tree_expression_type), (yyvsp[-1].tok_val)); }
#line 3800 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 73:
#line 717 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_prefix_op ('+', (yyvsp[0].tree_expression_type), (yyvsp[-1].tok_val)); }
#line 3806 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 74:
#line 719 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_prefix_op ('-', (yyvsp[0].tree_expression_type), (yyvsp[-1].tok_val)); }
#line 3812 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 75:
#line 721 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_binary_op (POW, (yyvsp[-2].tree_expression_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 3818 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 76:
#line 723 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_binary_op (EPOW, (yyvsp[-2].tree_expression_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 3824 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 77:
#line 725 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_binary_op ('+', (yyvsp[-2].tree_expression_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 3830 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 78:
#line 727 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_binary_op ('-', (yyvsp[-2].tree_expression_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 3836 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 79:
#line 729 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_binary_op ('*', (yyvsp[-2].tree_expression_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 3842 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 80:
#line 731 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_binary_op ('/', (yyvsp[-2].tree_expression_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 3848 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 81:
#line 733 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_binary_op ('+', (yyvsp[-2].tree_expression_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 3854 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 82:
#line 735 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_binary_op ('-', (yyvsp[-2].tree_expression_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 3860 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 83:
#line 737 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_binary_op (EMUL, (yyvsp[-2].tree_expression_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 3866 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 84:
#line 739 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_binary_op (EDIV, (yyvsp[-2].tree_expression_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 3872 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 85:
#line 741 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_binary_op (LEFTDIV, (yyvsp[-2].tree_expression_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 3878 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 86:
#line 743 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_binary_op (ELEFTDIV, (yyvsp[-2].tree_expression_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 3884 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 87:
#line 747 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = (yyvsp[0].tree_expression_type); }
#line 3890 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 88:
#line 749 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_postfix_op (PLUS_PLUS, (yyvsp[-1].tree_expression_type), (yyvsp[0].tok_val)); }
#line 3896 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 89:
#line 751 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_postfix_op (MINUS_MINUS, (yyvsp[-1].tree_expression_type), (yyvsp[0].tok_val)); }
#line 3902 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 90:
#line 753 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyval.tree_expression_type) = parser.make_index_expression ((yyvsp[-2].tree_expression_type), 0, '(');
                    if (! (yyval.tree_expression_type))
                      {
                        // make_index_expression deleted $1.
                        YYABORT;
                      }
                  }
#line 3915 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 91:
#line 762 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyval.tree_expression_type) = parser.make_index_expression ((yyvsp[-3].tree_expression_type), (yyvsp[-1].tree_argument_list_type), '(');
                    if (! (yyval.tree_expression_type))
                      {
                        // make_index_expression deleted $1 and $3.
                        YYABORT;
                      }
                  }
#line 3928 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 92:
#line 771 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyval.tree_expression_type) = parser.make_index_expression ((yyvsp[-2].tree_expression_type), 0, '{');
                    if (! (yyval.tree_expression_type))
                      {
                        // make_index_expression deleted $1.
                        YYABORT;
                      }
                  }
#line 3941 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 93:
#line 780 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyval.tree_expression_type) = parser.make_index_expression ((yyvsp[-3].tree_expression_type), (yyvsp[-1].tree_argument_list_type), '{');
                    if (! (yyval.tree_expression_type))
                      {
                        // make_index_expression deleted $1 and $3.
                        YYABORT;
                      }
                  }
#line 3954 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 94:
#line 789 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_indirect_ref ((yyvsp[-2].tree_expression_type), (yyvsp[0].tok_val)->text ()); }
#line 3960 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 95:
#line 791 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_indirect_ref ((yyvsp[-4].tree_expression_type), (yyvsp[-1].tree_expression_type)); }
#line 3966 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 96:
#line 793 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_prefix_op (PLUS_PLUS, (yyvsp[0].tree_expression_type), (yyvsp[-1].tok_val)); }
#line 3972 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 97:
#line 795 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_prefix_op (MINUS_MINUS, (yyvsp[0].tree_expression_type), (yyvsp[-1].tok_val)); }
#line 3978 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 98:
#line 797 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_prefix_op (EXPR_NOT, (yyvsp[0].tree_expression_type), (yyvsp[-1].tok_val)); }
#line 3984 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 99:
#line 799 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_prefix_op ('+', (yyvsp[0].tree_expression_type), (yyvsp[-1].tok_val)); }
#line 3990 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 100:
#line 801 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_prefix_op ('-', (yyvsp[0].tree_expression_type), (yyvsp[-1].tok_val)); }
#line 3996 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 101:
#line 805 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.finish_colon_expression ((yyvsp[0].tree_colon_expression_type)); }
#line 4002 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 102:
#line 809 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_colon_expression_type) = new tree_colon_expression ((yyvsp[0].tree_expression_type)); }
#line 4008 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 103:
#line 811 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-1].tok_val));

                    if (! ((yyval.tree_colon_expression_type) = (yyvsp[-2].tree_colon_expression_type)->append ((yyvsp[0].tree_expression_type))))
                      {
                        delete (yyvsp[-2].tree_colon_expression_type);
                        delete (yyvsp[0].tree_expression_type);
                        YYABORT;
                      }
                  }
#line 4023 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 104:
#line 824 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = (yyvsp[0].tree_expression_type); }
#line 4029 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 105:
#line 826 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_binary_op (EXPR_LT, (yyvsp[-2].tree_expression_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 4035 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 106:
#line 828 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_binary_op (EXPR_LE, (yyvsp[-2].tree_expression_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 4041 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 107:
#line 830 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_binary_op (EXPR_EQ, (yyvsp[-2].tree_expression_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 4047 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 108:
#line 832 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_binary_op (EXPR_GE, (yyvsp[-2].tree_expression_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 4053 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 109:
#line 834 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_binary_op (EXPR_GT, (yyvsp[-2].tree_expression_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 4059 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 110:
#line 836 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_binary_op (EXPR_NE, (yyvsp[-2].tree_expression_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 4065 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 111:
#line 838 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_binary_op (EXPR_AND, (yyvsp[-2].tree_expression_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 4071 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 112:
#line 840 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_binary_op (EXPR_OR, (yyvsp[-2].tree_expression_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 4077 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 113:
#line 842 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_boolean_op (EXPR_AND_AND, (yyvsp[-2].tree_expression_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 4083 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 114:
#line 844 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_boolean_op (EXPR_OR_OR, (yyvsp[-2].tree_expression_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 4089 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 115:
#line 848 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyval.tree_argument_list_type) = parser.validate_matrix_for_assignment ((yyvsp[0].tree_expression_type));

                    if ((yyval.tree_argument_list_type))
                      { lexer.looking_at_matrix_or_assign_lhs = false; }
                    else
                      {
                        // validate_matrix_for_assignment deleted $1.
                        YYABORT;
                      }
                  }
#line 4105 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 116:
#line 862 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_assign_op ('=', (yyvsp[-2].tree_argument_list_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 4111 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 117:
#line 864 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_assign_op (ADD_EQ, (yyvsp[-2].tree_argument_list_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 4117 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 118:
#line 866 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_assign_op (SUB_EQ, (yyvsp[-2].tree_argument_list_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 4123 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 119:
#line 868 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_assign_op (MUL_EQ, (yyvsp[-2].tree_argument_list_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 4129 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 120:
#line 870 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_assign_op (DIV_EQ, (yyvsp[-2].tree_argument_list_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 4135 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 121:
#line 872 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_assign_op (LEFTDIV_EQ, (yyvsp[-2].tree_argument_list_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 4141 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 122:
#line 874 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_assign_op (POW_EQ, (yyvsp[-2].tree_argument_list_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 4147 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 123:
#line 876 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_assign_op (EMUL_EQ, (yyvsp[-2].tree_argument_list_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 4153 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 124:
#line 878 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_assign_op (EDIV_EQ, (yyvsp[-2].tree_argument_list_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 4159 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 125:
#line 880 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_assign_op (ELEFTDIV_EQ, (yyvsp[-2].tree_argument_list_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 4165 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 126:
#line 882 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_assign_op (EPOW_EQ, (yyvsp[-2].tree_argument_list_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 4171 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 127:
#line 884 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_assign_op (AND_EQ, (yyvsp[-2].tree_argument_list_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 4177 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 128:
#line 886 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = parser.make_assign_op (OR_EQ, (yyvsp[-2].tree_argument_list_type), (yyvsp[-1].tok_val), (yyvsp[0].tree_expression_type)); }
#line 4183 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 129:
#line 890 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    if ((yyvsp[0].tree_expression_type) && ((yyvsp[0].tree_expression_type)->is_matrix () || (yyvsp[0].tree_expression_type)->is_cell ()))
                      {
                        if (parser.validate_array_list ((yyvsp[0].tree_expression_type)))
                          (yyval.tree_expression_type) = (yyvsp[0].tree_expression_type);
                        else
                          {
                            delete (yyvsp[0].tree_expression_type);
                            YYABORT;
                          }
                      }
                    else
                      (yyval.tree_expression_type) = (yyvsp[0].tree_expression_type);
                  }
#line 4202 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 130:
#line 905 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    if (! (yyvsp[0].tree_expression_type))
                      YYABORT;

                    (yyval.tree_expression_type) = (yyvsp[0].tree_expression_type);
                  }
#line 4213 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 131:
#line 912 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_expression_type) = (yyvsp[0].tree_anon_fcn_handle_type); }
#line 4219 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 132:
#line 920 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_command_type) = (yyvsp[0].tree_decl_command_type); }
#line 4225 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 133:
#line 922 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_command_type) = (yyvsp[0].tree_command_type); }
#line 4231 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 134:
#line 924 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_command_type) = (yyvsp[0].tree_command_type); }
#line 4237 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 135:
#line 926 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_command_type) = (yyvsp[0].tree_command_type); }
#line 4243 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 136:
#line 928 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_command_type) = (yyvsp[0].tree_command_type); }
#line 4249 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 137:
#line 930 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_command_type) = (yyvsp[0].tree_function_def_type); }
#line 4255 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 138:
#line 932 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_command_type) = (yyvsp[0].tree_command_type); }
#line 4261 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 139:
#line 940 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyval.tree_decl_command_type) = parser.make_decl_command (GLOBAL, (yyvsp[-1].tok_val), (yyvsp[0].tree_decl_init_list_type));
                    lexer.looking_at_decl_list = false;
                  }
#line 4270 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 140:
#line 945 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyval.tree_decl_command_type) = parser.make_decl_command (PERSISTENT, (yyvsp[-1].tok_val), (yyvsp[0].tree_decl_init_list_type));
                    lexer.looking_at_decl_list = false;
                  }
#line 4279 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 141:
#line 952 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_decl_init_list_type) = new tree_decl_init_list ((yyvsp[0].tree_decl_elt_type)); }
#line 4285 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 142:
#line 954 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyvsp[-1].tree_decl_init_list_type)->append ((yyvsp[0].tree_decl_elt_type));
                    (yyval.tree_decl_init_list_type) = (yyvsp[-1].tree_decl_init_list_type);
                  }
#line 4294 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 143:
#line 961 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyval.dummy_type) = 0;
                    lexer.looking_at_initializer_expression = true;
                  }
#line 4303 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 144:
#line 967 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_decl_elt_type) = new tree_decl_elt ((yyvsp[0].tree_identifier_type)); }
#line 4309 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 145:
#line 969 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-2].tok_val));

                    lexer.looking_at_initializer_expression = false;
                    (yyval.tree_decl_elt_type) = new tree_decl_elt ((yyvsp[-3].tree_identifier_type), (yyvsp[0].tree_expression_type));
                  }
#line 4320 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 146:
#line 982 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_command_type) = (yyvsp[0].tree_if_command_type); }
#line 4326 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 147:
#line 984 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_command_type) = (yyvsp[0].tree_switch_command_type); }
#line 4332 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 148:
#line 992 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    if (! ((yyval.tree_if_command_type) = parser.finish_if_command ((yyvsp[-3].tok_val), (yyvsp[-1].tree_if_command_list_type), (yyvsp[0].tok_val), (yyvsp[-2].comment_type))))
                      {
                        // finish_if_command deleted $3.
                        YYABORT;
                      }
                  }
#line 4344 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 149:
#line 1002 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_if_command_list_type) = (yyvsp[0].tree_if_command_list_type); }
#line 4350 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 150:
#line 1004 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyvsp[-1].tree_if_command_list_type)->append ((yyvsp[0].tree_if_clause_type));
                    (yyval.tree_if_command_list_type) = (yyvsp[-1].tree_if_command_list_type);
                  }
#line 4359 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 151:
#line 1011 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-1].punct_type));

                    (yyvsp[-3].tree_expression_type)->mark_braindead_shortcircuit ();

                    (yyval.tree_if_command_list_type) = parser.start_if_command ((yyvsp[-3].tree_expression_type), (yyvsp[0].tree_statement_list_type));
                  }
#line 4371 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 152:
#line 1019 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyvsp[-1].tree_if_command_list_type)->append ((yyvsp[0].tree_if_clause_type));
                    (yyval.tree_if_command_list_type) = (yyvsp[-1].tree_if_command_list_type);
                  }
#line 4380 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 153:
#line 1026 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-4].punct_type));
                    YYUSE ((yyvsp[-1].punct_type));

                    (yyvsp[-3].tree_expression_type)->mark_braindead_shortcircuit ();

                    (yyval.tree_if_clause_type) = parser.make_elseif_clause ((yyvsp[-6].tok_val), (yyvsp[-3].tree_expression_type), (yyvsp[0].tree_statement_list_type), (yyvsp[-5].comment_type));
                  }
#line 4393 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 154:
#line 1037 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-3].tok_val));
                    YYUSE ((yyvsp[-1].punct_type));

                    (yyval.tree_if_clause_type) = new tree_if_clause ((yyvsp[0].tree_statement_list_type), (yyvsp[-2].comment_type));
                  }
#line 4404 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 155:
#line 1050 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-2].punct_type));

                    if (! ((yyval.tree_switch_command_type) = parser.finish_switch_command ((yyvsp[-5].tok_val), (yyvsp[-3].tree_expression_type), (yyvsp[-1].tree_switch_case_list_type), (yyvsp[0].tok_val), (yyvsp[-4].comment_type))))
                      {
                        // finish_switch_command deleted $3 adn $5.
                        YYABORT;
                      }
                  }
#line 4418 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 156:
#line 1062 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_switch_case_list_type) = new tree_switch_case_list (); }
#line 4424 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 157:
#line 1064 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_switch_case_list_type) = new tree_switch_case_list ((yyvsp[0].tree_switch_case_type)); }
#line 4430 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 158:
#line 1066 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_switch_case_list_type) = (yyvsp[0].tree_switch_case_list_type); }
#line 4436 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 159:
#line 1068 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyvsp[-1].tree_switch_case_list_type)->append ((yyvsp[0].tree_switch_case_type));
                    (yyval.tree_switch_case_list_type) = (yyvsp[-1].tree_switch_case_list_type);
                  }
#line 4445 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 160:
#line 1075 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_switch_case_list_type) = new tree_switch_case_list ((yyvsp[0].tree_switch_case_type)); }
#line 4451 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 161:
#line 1077 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyvsp[-1].tree_switch_case_list_type)->append ((yyvsp[0].tree_switch_case_type));
                    (yyval.tree_switch_case_list_type) = (yyvsp[-1].tree_switch_case_list_type);
                  }
#line 4460 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 162:
#line 1084 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-4].punct_type));
                    YYUSE ((yyvsp[-1].punct_type));

                    (yyval.tree_switch_case_type) = parser.make_switch_case ((yyvsp[-6].tok_val), (yyvsp[-3].tree_expression_type), (yyvsp[0].tree_statement_list_type), (yyvsp[-5].comment_type));
                  }
#line 4471 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 163:
#line 1093 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-3].tok_val));
                    YYUSE ((yyvsp[-1].punct_type));

                    (yyval.tree_switch_case_type) = new tree_switch_case ((yyvsp[0].tree_statement_list_type), (yyvsp[-2].comment_type));
                  }
#line 4482 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 164:
#line 1106 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-2].punct_type));

                    (yyvsp[-4].tree_expression_type)->mark_braindead_shortcircuit ();

                    if (! ((yyval.tree_command_type) = parser.make_while_command ((yyvsp[-6].tok_val), (yyvsp[-4].tree_expression_type), (yyvsp[-1].tree_statement_list_type), (yyvsp[0].tok_val), (yyvsp[-5].comment_type))))
                      {
                        // make_while_command deleted $3 and $6.
                        YYABORT;
                      }
                  }
#line 4498 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 165:
#line 1118 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-5].tok_val));
                    YYUSE ((yyvsp[-3].punct_type));

                    (yyval.tree_command_type) = parser.make_do_until_command ((yyvsp[-1].tok_val), (yyvsp[-2].tree_statement_list_type), (yyvsp[0].tree_expression_type), (yyvsp[-4].comment_type));
                  }
#line 4509 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 166:
#line 1125 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-5].tok_val));
                    YYUSE ((yyvsp[-2].punct_type));

                    if (! ((yyval.tree_command_type) = parser.make_for_command (FOR, (yyvsp[-8].tok_val), (yyvsp[-6].tree_argument_list_type), (yyvsp[-4].tree_expression_type), 0,
                                                         (yyvsp[-1].tree_statement_list_type), (yyvsp[0].tok_val), (yyvsp[-7].comment_type))))
                      {
                        // make_for_command deleted $3, $5, and $8.
                        YYABORT;
                      }
                  }
#line 4525 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 167:
#line 1137 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-5].tok_val));
                    YYUSE ((yyvsp[-2].punct_type));

                    if (! ((yyval.tree_command_type) = parser.make_for_command (FOR, (yyvsp[-9].tok_val), (yyvsp[-6].tree_argument_list_type), (yyvsp[-4].tree_expression_type), 0,
                                                         (yyvsp[-1].tree_statement_list_type), (yyvsp[0].tok_val), (yyvsp[-8].comment_type))))
                      {
                        // make_for_command deleted $4, $6, and $9.
                        YYABORT;
                      }
                  }
#line 4541 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 168:
#line 1149 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-5].tok_val));
                    YYUSE ((yyvsp[-2].punct_type));

                    if (! ((yyval.tree_command_type) = parser.make_for_command (PARFOR, (yyvsp[-8].tok_val), (yyvsp[-6].tree_argument_list_type), (yyvsp[-4].tree_expression_type),
                                                         0, (yyvsp[-1].tree_statement_list_type), (yyvsp[0].tok_val), (yyvsp[-7].comment_type))))
                      {
                        // make_for_command deleted $3, $5, and $8.
                        YYABORT;
                      }
                  }
#line 4557 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 169:
#line 1161 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-7].tok_val));
                    YYUSE ((yyvsp[-2].punct_type));

                    if (! ((yyval.tree_command_type) = parser.make_for_command (PARFOR, (yyvsp[-11].tok_val), (yyvsp[-8].tree_argument_list_type), (yyvsp[-6].tree_expression_type),
                                                         (yyvsp[-4].tree_expression_type), (yyvsp[-1].tree_statement_list_type), (yyvsp[0].tok_val), (yyvsp[-10].comment_type))))
                      {
                        // make_for_command deleted $4, $6, $8, and $11.
                        YYABORT;
                      }
                  }
#line 4573 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 170:
#line 1179 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_command_type) = parser.make_break_command ((yyvsp[0].tok_val)); }
#line 4579 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 171:
#line 1181 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_command_type) = parser.make_continue_command ((yyvsp[0].tok_val)); }
#line 4585 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 172:
#line 1183 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_command_type) = parser.make_return_command ((yyvsp[0].tok_val)); }
#line 4591 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 173:
#line 1192 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-6].punct_type));
                    YYUSE ((yyvsp[-4].tok_val));
                    YYUSE ((yyvsp[-2].punct_type));

                    if (! ((yyval.tree_command_type) = parser.make_unwind_command ((yyvsp[-8].tok_val), (yyvsp[-5].tree_statement_list_type), (yyvsp[-1].tree_statement_list_type), (yyvsp[0].tok_val), (yyvsp[-7].comment_type), (yyvsp[-3].comment_type))))
                      {
                        // make_unwind_command deleted $4 and $8.
                        YYABORT;
                      }
                  }
#line 4607 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 174:
#line 1205 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-6].punct_type));
                    YYUSE ((yyvsp[-4].tok_val));
                    YYUSE ((yyvsp[-2].punct_type));

                    if (! ((yyval.tree_command_type) = parser.make_try_command ((yyvsp[-8].tok_val), (yyvsp[-5].tree_statement_list_type), (yyvsp[-2].punct_type), (yyvsp[-1].tree_statement_list_type), (yyvsp[0].tok_val), (yyvsp[-7].comment_type), (yyvsp[-3].comment_type))))
                      {
                        // make_try_command deleted $4 and $8.
                        YYABORT;
                      }
                  }
#line 4623 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 175:
#line 1217 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-2].punct_type));

                    if (! ((yyval.tree_command_type) = parser.make_try_command ((yyvsp[-4].tok_val), (yyvsp[-1].tree_statement_list_type), 0, 0, (yyvsp[0].tok_val), (yyvsp[-3].comment_type), 0)))
                      {
                        // make_try_command deleted $4.
                        YYABORT;
                      }
                  }
#line 4637 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 176:
#line 1233 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyval.dummy_type) = 0;

                    parser.curr_fcn_depth++;

                    if (parser.max_fcn_depth < parser.curr_fcn_depth)
                      parser.max_fcn_depth = parser.curr_fcn_depth;

                    lexer.symtab_context.push (symbol_table::alloc_scope ());

                    parser.function_scopes.push_back
                     (lexer.symtab_context.curr_scope ());

                    if (! lexer.reading_script_file
                        && parser.curr_fcn_depth == 1
                        && ! parser.parsing_subfunctions)
                      parser.primary_fcn_scope
                        = lexer.symtab_context.curr_scope ();

                    if (lexer.reading_script_file
                        && parser.curr_fcn_depth > 1)
                      {
                        parser.bison_error ("nested functions not implemented in this context");
                        YYABORT;
                      }
                  }
#line 4668 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 177:
#line 1266 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyval.dummy_type) = 0;
                    lexer.looking_at_parameter_list = true;

                    if (lexer.looking_at_function_handle)
                      {
                        lexer.symtab_context.push (symbol_table::alloc_scope ());
                        lexer.looking_at_function_handle--;
                        lexer.looking_at_anon_fcn_args = true;
                      }
                  }
#line 4684 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 178:
#line 1280 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyval.dummy_type) = 0;
                    lexer.looking_at_parameter_list = false;
                    lexer.looking_for_object_index = false;
                  }
#line 4694 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 179:
#line 1288 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    if ((yyvsp[-1].tree_parameter_list_type))
                      lexer.mark_as_variables ((yyvsp[-1].tree_parameter_list_type)->variable_names ());

                    (yyval.tree_parameter_list_type) = (yyvsp[-1].tree_parameter_list_type);
                  }
#line 4705 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 180:
#line 1295 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyval.tree_parameter_list_type) = 0;
                    parser.bison_error ("invalid parameter list");
                    YYABORT;
                  }
#line 4715 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 181:
#line 1303 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_parameter_list_type) = 0; }
#line 4721 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 182:
#line 1305 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyvsp[0].tree_parameter_list_type)->mark_as_formal_parameters ();
                    if ((yyvsp[0].tree_parameter_list_type)->validate (tree_parameter_list::in))
                      {
                        lexer.mark_as_variables ((yyvsp[0].tree_parameter_list_type)->variable_names ());
                        (yyval.tree_parameter_list_type) = (yyvsp[0].tree_parameter_list_type);
                      }
                    else
                      {
                        delete (yyvsp[0].tree_parameter_list_type);
                        YYABORT;
                      }
                  }
#line 4739 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 183:
#line 1321 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_parameter_list_type) = new tree_parameter_list ((yyvsp[0].tree_decl_elt_type)); }
#line 4745 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 184:
#line 1323 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyvsp[-2].tree_parameter_list_type)->append ((yyvsp[0].tree_decl_elt_type));
                    (yyval.tree_parameter_list_type) = (yyvsp[-2].tree_parameter_list_type);
                  }
#line 4754 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 185:
#line 1330 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_decl_elt_type) = (yyvsp[0].tree_decl_elt_type); }
#line 4760 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 186:
#line 1332 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_decl_elt_type) = new tree_decl_elt ((yyvsp[0].tree_identifier_type)); }
#line 4766 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 187:
#line 1340 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    lexer.looking_at_return_list = false;

                    (yyval.tree_parameter_list_type) = new tree_parameter_list ();
                  }
#line 4776 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 188:
#line 1346 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    lexer.looking_at_return_list = false;

                    tree_parameter_list *tmp = new tree_parameter_list ((yyvsp[0].tree_identifier_type));

                    // Even though this parameter list can contain only
                    // a single identifier, we still need to validate it
                    // to check for varargin or varargout.

                    if (tmp->validate (tree_parameter_list::out))
                      (yyval.tree_parameter_list_type) = tmp;
                    else
                      {
                        delete tmp;
                        YYABORT;
                      }
                  }
#line 4798 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 189:
#line 1364 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    lexer.looking_at_return_list = false;

                    // Check for duplicate parameter names, varargin,
                    // or varargout.

                    if ((yyvsp[-1].tree_parameter_list_type)->validate (tree_parameter_list::out))
                      (yyval.tree_parameter_list_type) = (yyvsp[-1].tree_parameter_list_type);
                    else
                      {
                        delete (yyvsp[-1].tree_parameter_list_type);
                        YYABORT;
                      }
                  }
#line 4817 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 190:
#line 1381 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_parameter_list_type) = new tree_parameter_list (new tree_decl_elt ((yyvsp[0].tree_identifier_type))); }
#line 4823 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 191:
#line 1383 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyvsp[-2].tree_parameter_list_type)->append (new tree_decl_elt ((yyvsp[0].tree_identifier_type)));
                    (yyval.tree_parameter_list_type) = (yyvsp[-2].tree_parameter_list_type);
                  }
#line 4832 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 192:
#line 1394 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-2].punct_type));

                    if (lexer.reading_fcn_file)
                      {
                        // Delete the dummy statement_list we created
                        // after parsing the function.  Any function
                        // definitions found in the file have already
                        // been stored in the symbol table or in
                        // base_parser::primary_fcn_ptr.

                        delete (yyvsp[-1].tree_statement_list_type);
                      }
                    else
                      {
                        tree_statement *end_of_script
                          = parser.make_end ("endscript", true,
                                             lexer.input_line_number,
                                             lexer.current_input_column);

                        parser.make_script ((yyvsp[-1].tree_statement_list_type), end_of_script);
                      }

                    (yyval.tree_command_type) = 0;
                  }
#line 4862 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 193:
#line 1420 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-3].punct_type));
                    YYUSE ((yyvsp[-1].punct_type));

                    if (lexer.reading_classdef_file)
                      parser.classdef_object = (yyvsp[-2].tree_classdef_type);

                    (yyval.tree_command_type) = 0;
                  }
#line 4876 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 194:
#line 1436 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyval.tok_val) = (yyvsp[0].tok_val);
                    if (lexer.reading_classdef_file
                        || lexer.parsing_classdef)
                      lexer.maybe_classdef_get_set_method = true;
                  }
#line 4887 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 195:
#line 1445 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyval.tree_function_def_type) = parser.finish_function (0, (yyvsp[0].octave_user_function_type), (yyvsp[-1].comment_type), (yyvsp[-2].tok_val)->line (),
                                                 (yyvsp[-2].tok_val)->column ());
                    parser.recover_from_parsing_function ();
                  }
#line 4897 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 196:
#line 1451 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-1].tok_val));

                    (yyval.tree_function_def_type) = parser.finish_function ((yyvsp[-2].tree_parameter_list_type), (yyvsp[0].octave_user_function_type), (yyvsp[-3].comment_type), (yyvsp[-4].tok_val)->line (),
                                                 (yyvsp[-4].tok_val)->column ());
                    parser.recover_from_parsing_function ();
                  }
#line 4909 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 197:
#line 1461 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    std::string id_name = (yyvsp[0].tree_identifier_type)->name ();

                    lexer.parsed_function_name.top () = true;
                    lexer.maybe_classdef_get_set_method = false;

                    (yyval.tree_identifier_type) = (yyvsp[0].tree_identifier_type);
                  }
#line 4922 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 198:
#line 1470 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-2].tok_val));

                    lexer.parsed_function_name.top () = true;
                    lexer.maybe_classdef_get_set_method = false;
                    lexer.parsing_classdef_get_method = true;
                    (yyval.tree_identifier_type) = (yyvsp[0].tree_identifier_type);
                  }
#line 4935 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 199:
#line 1479 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-2].tok_val));

                    lexer.parsed_function_name.top () = true;
                    lexer.maybe_classdef_get_set_method = false;
                    lexer.parsing_classdef_set_method = true;
                    (yyval.tree_identifier_type) = (yyvsp[0].tree_identifier_type);
                  }
#line 4948 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 200:
#line 1490 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    std::string fname = (yyvsp[-1].tree_identifier_type)->name ();

                    delete (yyvsp[-1].tree_identifier_type);

                    if (lexer.parsing_classdef_get_method)
                      fname.insert (0, "get.");
                    else if (lexer.parsing_classdef_set_method)
                      fname.insert (0, "set.");

                    lexer.parsing_classdef_get_method = false;
                    lexer.parsing_classdef_set_method = false;

                    (yyval.octave_user_function_type) = parser.frob_function (fname, (yyvsp[0].octave_user_function_type));
                  }
#line 4968 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 201:
#line 1508 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-2].punct_type));

                    (yyval.octave_user_function_type) = parser.start_function ((yyvsp[-3].tree_parameter_list_type), (yyvsp[-1].tree_statement_list_type), (yyvsp[0].tree_statement_type));
                  }
#line 4978 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 202:
#line 1514 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-2].punct_type));

                    (yyval.octave_user_function_type) = parser.start_function (0, (yyvsp[-1].tree_statement_list_type), (yyvsp[0].tree_statement_type));
                  }
#line 4988 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 203:
#line 1522 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    parser.endfunction_found = true;

                    if (parser.end_token_ok ((yyvsp[0].tok_val), token::function_end))
                      (yyval.tree_statement_type) = parser.make_end ("endfunction", false,
                                            (yyvsp[0].tok_val)->line (), (yyvsp[0].tok_val)->column ());
                    else
                      {
                        parser.end_token_error ((yyvsp[0].tok_val), token::function_end);
                        YYABORT;
                      }
                  }
#line 5005 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 204:
#line 1535 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
// A lot of tests are based on the assumption that this is OK
//                  if (lexer.reading_script_file)
//                    {
//                      parser.bison_error ("function body open at end of script");
//                      YYABORT;
//                    }

                    if (parser.endfunction_found)
                      {
                        parser.bison_error ("inconsistent function endings -- "
                                 "if one function is explicitly ended, "
                                 "so must all the others");
                        YYABORT;
                      }

                    if (! (lexer.reading_fcn_file || lexer.reading_script_file
                           || lexer.input_from_eval_string ()))
                      {
                        parser.bison_error ("function body open at end of input");
                        YYABORT;
                      }

                    if (lexer.reading_classdef_file)
                      {
                        parser.bison_error ("classdef body open at end of input");
                        YYABORT;
                      }

                    (yyval.tree_statement_type) = parser.make_end ("endfunction", true,
                                          lexer.input_line_number,
                                          lexer.current_input_column);
                  }
#line 5043 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 205:
#line 1575 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    if (! lexer.reading_classdef_file)
                      {
                        parser.bison_error ("classdef must appear inside a file containing only a class definition");
                        YYABORT;
                      }

                    lexer.parsing_classdef = true;
                    (yyval.tok_val) = (yyvsp[0].tok_val);
                  }
#line 5058 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 206:
#line 1588 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-3].punct_type));
                    YYUSE ((yyvsp[-1].punct_type));

                    lexer.parsing_classdef = false;

                    if (! ((yyval.tree_classdef_type) = parser.make_classdef ((yyvsp[-8].tok_val), (yyvsp[-6].tree_classdef_attribute_list_type), (yyvsp[-5].tree_identifier_type), (yyvsp[-4].tree_classdef_superclass_list_type), (yyvsp[-2].tree_classdef_body_type), (yyvsp[0].tok_val), (yyvsp[-7].comment_type))))
                      {
                        // make_classdef deleted $3, $4, $5, and $7.
                        YYABORT;
                      }
                  }
#line 5075 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 207:
#line 1601 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-1].punct_type));

                    lexer.parsing_classdef = false;

                    if (! ((yyval.tree_classdef_type) = parser.make_classdef ((yyvsp[-6].tok_val), (yyvsp[-4].tree_classdef_attribute_list_type), (yyvsp[-3].tree_identifier_type), (yyvsp[-2].tree_classdef_superclass_list_type), 0, (yyvsp[0].tok_val), (yyvsp[-5].comment_type))))
                      {
                        // make_classdef deleted $3, $4, and $5.
                        YYABORT;
                      }
                  }
#line 5091 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 208:
#line 1615 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_classdef_attribute_list_type) = 0; }
#line 5097 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 209:
#line 1617 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_classdef_attribute_list_type) = (yyvsp[-1].tree_classdef_attribute_list_type); }
#line 5103 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 210:
#line 1621 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_classdef_attribute_list_type) = new tree_classdef_attribute_list ((yyvsp[0].tree_classdef_attribute_type)); }
#line 5109 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 211:
#line 1623 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyvsp[-2].tree_classdef_attribute_list_type)->append ((yyvsp[0].tree_classdef_attribute_type));
                    (yyval.tree_classdef_attribute_list_type) = (yyvsp[-2].tree_classdef_attribute_list_type);
                  }
#line 5118 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 212:
#line 1630 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_classdef_attribute_type) = new tree_classdef_attribute ((yyvsp[0].tree_identifier_type)); }
#line 5124 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 213:
#line 1632 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-2].tok_val));

                    lexer.looking_at_initializer_expression = false;
                    (yyval.tree_classdef_attribute_type) = new tree_classdef_attribute ((yyvsp[-3].tree_identifier_type), (yyvsp[0].tree_expression_type));
                  }
#line 5135 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 214:
#line 1639 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-1].tok_val));

                    (yyval.tree_classdef_attribute_type) = new tree_classdef_attribute ((yyvsp[0].tree_identifier_type), false);
                  }
#line 5145 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 215:
#line 1648 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_classdef_superclass_list_type) = 0; }
#line 5151 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 216:
#line 1650 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_classdef_superclass_list_type) = (yyvsp[0].tree_classdef_superclass_list_type); }
#line 5157 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 217:
#line 1654 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[0].tok_val));

                    lexer.enable_fq_identifier ();
                  }
#line 5167 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 218:
#line 1660 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_classdef_superclass_list_type) = new tree_classdef_superclass_list ((yyvsp[0].tree_classdef_superclass_type)); }
#line 5173 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 219:
#line 1662 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[0].tok_val));

                    lexer.enable_fq_identifier ();
                  }
#line 5183 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 220:
#line 1668 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyvsp[-3].tree_classdef_superclass_list_type)->append ((yyvsp[0].tree_classdef_superclass_type));
                    (yyval.tree_classdef_superclass_list_type) = (yyvsp[-3].tree_classdef_superclass_list_type);
                  }
#line 5192 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 221:
#line 1675 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_classdef_superclass_type) = new tree_classdef_superclass ((yyvsp[0].tok_val)->text ()); }
#line 5198 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 222:
#line 1679 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_classdef_body_type) = new tree_classdef_body ((yyvsp[0].tree_classdef_properties_block_type)); }
#line 5204 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 223:
#line 1681 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_classdef_body_type) = new tree_classdef_body ((yyvsp[0].tree_classdef_methods_block_type)); }
#line 5210 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 224:
#line 1683 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_classdef_body_type) = new tree_classdef_body ((yyvsp[0].tree_classdef_events_block_type)); }
#line 5216 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 225:
#line 1685 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_classdef_body_type) = new tree_classdef_body ((yyvsp[0].tree_classdef_enum_block_type)); }
#line 5222 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 226:
#line 1687 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-1].punct_type));

                    (yyvsp[-2].tree_classdef_body_type)->append ((yyvsp[0].tree_classdef_properties_block_type));
                    (yyval.tree_classdef_body_type) = (yyvsp[-2].tree_classdef_body_type);
                  }
#line 5233 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 227:
#line 1694 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-1].punct_type));

                    (yyvsp[-2].tree_classdef_body_type)->append ((yyvsp[0].tree_classdef_methods_block_type));
                    (yyval.tree_classdef_body_type) = (yyvsp[-2].tree_classdef_body_type);
                  }
#line 5244 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 228:
#line 1701 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-1].punct_type));

                    (yyvsp[-2].tree_classdef_body_type)->append ((yyvsp[0].tree_classdef_events_block_type));
                    (yyval.tree_classdef_body_type) = (yyvsp[-2].tree_classdef_body_type);
                  }
#line 5255 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 229:
#line 1708 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-1].punct_type));

                    (yyvsp[-2].tree_classdef_body_type)->append ((yyvsp[0].tree_classdef_enum_block_type));
                    (yyval.tree_classdef_body_type) = (yyvsp[-2].tree_classdef_body_type);
                  }
#line 5266 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 230:
#line 1718 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-3].punct_type));
                    YYUSE ((yyvsp[-1].punct_type));

                    if (! ((yyval.tree_classdef_properties_block_type) = parser.make_classdef_properties_block
                           ((yyvsp[-6].tok_val), (yyvsp[-4].tree_classdef_attribute_list_type), (yyvsp[-2].tree_classdef_property_list_type), (yyvsp[0].tok_val), (yyvsp[-5].comment_type))))
                      {
                        // make_classdef_properties_block delete $3 and $5.
                        YYABORT;
                      }
                  }
#line 5282 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 231:
#line 1730 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-1].punct_type));

                    if (! ((yyval.tree_classdef_properties_block_type) = parser.make_classdef_properties_block
                           ((yyvsp[-4].tok_val), (yyvsp[-2].tree_classdef_attribute_list_type), 0, (yyvsp[0].tok_val), (yyvsp[-3].comment_type))))
                      {
                        // make_classdef_properties_block delete $3.
                        YYABORT;
                      }
                  }
#line 5297 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 232:
#line 1744 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_classdef_property_list_type) = new tree_classdef_property_list ((yyvsp[0].tree_classdef_property_type)); }
#line 5303 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 233:
#line 1746 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-1].punct_type));

                    (yyvsp[-2].tree_classdef_property_list_type)->append ((yyvsp[0].tree_classdef_property_type));
                    (yyval.tree_classdef_property_list_type) = (yyvsp[-2].tree_classdef_property_list_type);
                  }
#line 5314 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 234:
#line 1755 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_classdef_property_type) = new tree_classdef_property ((yyvsp[0].tree_identifier_type)); }
#line 5320 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 235:
#line 1757 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-2].tok_val));

                    lexer.looking_at_initializer_expression = false;
                    (yyval.tree_classdef_property_type) = new tree_classdef_property ((yyvsp[-3].tree_identifier_type), (yyvsp[0].tree_expression_type));
                  }
#line 5331 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 236:
#line 1766 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-3].punct_type));
                    YYUSE ((yyvsp[-1].punct_type));

                    if (! ((yyval.tree_classdef_methods_block_type) = parser.make_classdef_methods_block
                           ((yyvsp[-6].tok_val), (yyvsp[-4].tree_classdef_attribute_list_type), (yyvsp[-2].tree_classdef_methods_list_type), (yyvsp[0].tok_val), (yyvsp[-5].comment_type))))
                      {
                        // make_classdef_methods_block deleted $3 and $5.
                        YYABORT;
                      }
                  }
#line 5347 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 237:
#line 1778 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-1].punct_type));

                    if (! ((yyval.tree_classdef_methods_block_type) = parser.make_classdef_methods_block
                           ((yyvsp[-4].tok_val), (yyvsp[-2].tree_classdef_attribute_list_type), 0, (yyvsp[0].tok_val), (yyvsp[-3].comment_type))))
                      {
                        // make_classdef_methods_block deleted $3.
                        YYABORT;
                      }
                  }
#line 5362 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 238:
#line 1792 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    if (! ((yyval.octave_user_function_type) = parser.start_classdef_external_method ((yyvsp[0].tree_identifier_type), 0)))
                      YYABORT;
                  }
#line 5371 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 239:
#line 1797 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    if (! ((yyval.octave_user_function_type) = parser.start_classdef_external_method ((yyvsp[-1].tree_identifier_type), (yyvsp[0].tree_parameter_list_type))))
                      YYABORT;
                  }
#line 5380 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 240:
#line 1804 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_function_def_type) = parser.finish_classdef_external_method ((yyvsp[0].octave_user_function_type), 0, (yyvsp[-1].comment_type)); }
#line 5386 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 241:
#line 1806 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[0].tok_val));

                    lexer.defining_func++;
                    lexer.parsed_function_name.push (false);
                  }
#line 5397 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 242:
#line 1813 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    lexer.defining_func--;
                    lexer.parsed_function_name.pop ();
                    (yyval.tree_function_def_type) = parser.finish_classdef_external_method ((yyvsp[0].octave_user_function_type), (yyvsp[-3].tree_parameter_list_type), (yyvsp[-4].comment_type));
                  }
#line 5407 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 243:
#line 1821 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_function_def_type) = (yyvsp[0].tree_function_def_type); }
#line 5413 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 244:
#line 1823 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_function_def_type) = (yyvsp[0].tree_function_def_type); }
#line 5419 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 245:
#line 1827 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    octave_value fcn;
                    if ((yyvsp[0].tree_function_def_type))
                      fcn = (yyvsp[0].tree_function_def_type)->function ();
                    delete (yyvsp[0].tree_function_def_type);
                    (yyval.tree_classdef_methods_list_type) = new tree_classdef_methods_list (fcn);
                  }
#line 5431 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 246:
#line 1835 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-1].punct_type));

                    octave_value fcn;
                    if ((yyvsp[0].tree_function_def_type))
                      fcn = (yyvsp[0].tree_function_def_type)->function ();
                    delete (yyvsp[0].tree_function_def_type);

                    (yyvsp[-2].tree_classdef_methods_list_type)->append (fcn);
                    (yyval.tree_classdef_methods_list_type) = (yyvsp[-2].tree_classdef_methods_list_type);
                  }
#line 5447 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 247:
#line 1849 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-3].punct_type));
                    YYUSE ((yyvsp[-1].punct_type));

                    if (! ((yyval.tree_classdef_events_block_type) = parser.make_classdef_events_block
                           ((yyvsp[-6].tok_val), (yyvsp[-4].tree_classdef_attribute_list_type), (yyvsp[-2].tree_classdef_events_list_type), (yyvsp[0].tok_val), (yyvsp[-5].comment_type))))
                      {
                        // make_classdef_events_block deleted $3 and $5.
                        YYABORT;
                      }
                  }
#line 5463 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 248:
#line 1861 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-1].punct_type));

                    if (! ((yyval.tree_classdef_events_block_type) = parser.make_classdef_events_block
                           ((yyvsp[-4].tok_val), (yyvsp[-2].tree_classdef_attribute_list_type), 0, (yyvsp[0].tok_val), (yyvsp[-3].comment_type))))
                      {
                        // make_classdef_events_block deleted $3.
                        YYABORT;
                      }
                  }
#line 5478 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 249:
#line 1874 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_classdef_events_list_type) = new tree_classdef_events_list ((yyvsp[0].tree_classdef_event_type)); }
#line 5484 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 250:
#line 1876 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-1].punct_type));

                    (yyvsp[-2].tree_classdef_events_list_type)->append ((yyvsp[0].tree_classdef_event_type));
                    (yyval.tree_classdef_events_list_type) = (yyvsp[-2].tree_classdef_events_list_type);
                  }
#line 5495 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 251:
#line 1885 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_classdef_event_type) = new tree_classdef_event ((yyvsp[0].tree_identifier_type)); }
#line 5501 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 252:
#line 1889 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-3].punct_type));
                    YYUSE ((yyvsp[-1].punct_type));

                    if (! ((yyval.tree_classdef_enum_block_type) = parser.make_classdef_enum_block
                           ((yyvsp[-6].tok_val), (yyvsp[-4].tree_classdef_attribute_list_type), (yyvsp[-2].tree_classdef_enum_list_type), (yyvsp[0].tok_val), (yyvsp[-5].comment_type))))
                      {
                        // make_classdef_enum_block deleted $3 and $5.
                        YYABORT;
                      }
                  }
#line 5517 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 253:
#line 1901 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-1].punct_type));

                    if (! ((yyval.tree_classdef_enum_block_type) = parser.make_classdef_enum_block
                           ((yyvsp[-4].tok_val), (yyvsp[-2].tree_classdef_attribute_list_type), 0, (yyvsp[0].tok_val), (yyvsp[-3].comment_type))))
                      {
                        // make_classdef_enum_block deleted $3.
                        YYABORT;
                      }
                  }
#line 5532 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 254:
#line 1914 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_classdef_enum_list_type) = new tree_classdef_enum_list ((yyvsp[0].tree_classdef_enum_type)); }
#line 5538 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 255:
#line 1916 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    YYUSE ((yyvsp[-1].punct_type));

                    (yyvsp[-2].tree_classdef_enum_list_type)->append ((yyvsp[0].tree_classdef_enum_type));
                    (yyval.tree_classdef_enum_list_type) = (yyvsp[-2].tree_classdef_enum_list_type);
                  }
#line 5549 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 256:
#line 1925 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.tree_classdef_enum_type) = new tree_classdef_enum ((yyvsp[-3].tree_identifier_type), (yyvsp[-1].tree_expression_type)); }
#line 5555 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 257:
#line 1933 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyval.dummy_type) = 0;
                    lexer.at_beginning_of_statement = true;
                  }
#line 5564 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 258:
#line 1940 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.comment_type) = lexer.get_comment (); }
#line 5570 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 259:
#line 1944 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    {
                    (yyval.dummy_type) = 0;
                    std::string msg = (yyvsp[0].tok_val)->text ();
                    parser.bison_error (msg.c_str ());
                  }
#line 5580 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 260:
#line 1950 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.dummy_type) = 0; }
#line 5586 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 261:
#line 1954 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.punct_type) = ','; }
#line 5592 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 262:
#line 1956 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.punct_type) = ';'; }
#line 5598 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 263:
#line 1958 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.punct_type) = (yyvsp[-1].punct_type); }
#line 5604 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 264:
#line 1960 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.punct_type) = (yyvsp[-1].punct_type); }
#line 5610 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 265:
#line 1964 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.punct_type) = 0; }
#line 5616 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 266:
#line 1966 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.punct_type) = (yyvsp[0].punct_type); }
#line 5622 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 267:
#line 1970 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.punct_type) = 0; }
#line 5628 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 268:
#line 1972 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.punct_type) = (yyvsp[0].punct_type); }
#line 5634 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 269:
#line 1976 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.punct_type) = '\n'; }
#line 5640 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 270:
#line 1978 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.punct_type) = (yyvsp[-1].punct_type); }
#line 5646 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 271:
#line 1982 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.punct_type) = ','; }
#line 5652 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 272:
#line 1984 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.punct_type) = ';'; }
#line 5658 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 273:
#line 1986 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.punct_type) = '\n'; }
#line 5664 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 274:
#line 1988 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.punct_type) = (yyvsp[-1].punct_type); }
#line 5670 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 275:
#line 1990 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.punct_type) = (yyvsp[-1].punct_type); }
#line 5676 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 276:
#line 1992 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.punct_type) = (yyvsp[-1].punct_type); }
#line 5682 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 277:
#line 1996 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.punct_type) = 0; }
#line 5688 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;

  case 278:
#line 1998 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1646  */
    { (yyval.punct_type) = (yyvsp[0].punct_type); }
#line 5694 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
    break;


#line 5698 "libinterp/parse-tree/oct-parse.cc" /* yacc.c:1646  */
      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (parser, YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (parser, yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, parser);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYTERROR;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;


      yydestruct ("Error: popping",
                  yystos[yystate], yyvsp, parser);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (parser, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, parser);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  yystos[*yyssp], yyvsp, parser);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  yyps->yynew = 1;

yypushreturn:
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  return yyresult;
}
#line 2001 "libinterp/parse-tree/oct-parse.yy" /* yacc.c:1906  */


#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
// Restore prevailing warning state for remainder of the file.
#pragma GCC diagnostic pop
#endif

// Generic error messages.

#undef lexer

static void
yyerror (octave::base_parser& parser, const char *s)
{
  parser.bison_error (s);
}

namespace octave
{
  base_parser::base_parser (base_lexer& lxr)
    : endfunction_found (false), autoloading (false),
      fcn_file_from_relative_lookup (false), parsing_subfunctions (false),
      max_fcn_depth (0), curr_fcn_depth (0), primary_fcn_scope (-1),
      curr_class_name (), curr_package_name (), function_scopes (),
      primary_fcn_ptr (0), subfunction_names (), classdef_object (0),
      stmt_list (0), lexer (lxr), parser_state (yypstate_new ())
  { }

  base_parser::~base_parser (void)
  {
    delete stmt_list;

    delete &lexer;

    // FIXME: Deleting the internal Bison parser state structure does
    // not clean up any partial parse trees in the event of an interrupt or
    // error.  It's not clear how to safely do that with the C language
    // parser that Bison generates.  The C++ language parser that Bison
    // generates would do it for us automatically whenever an exception
    // is thrown while parsing input, but there is currently no C++
    // interface for a push parser.

    yypstate_delete (static_cast<yypstate *> (parser_state));
  }

  void
  base_parser::reset (void)
  {
    endfunction_found = false;
    autoloading = false;
    fcn_file_from_relative_lookup = false;
    parsing_subfunctions = false;
    max_fcn_depth = 0;
    curr_fcn_depth = 0;
    primary_fcn_scope = -1;
    curr_class_name = "";
    curr_package_name = "";
    function_scopes.clear ();
    primary_fcn_ptr  = 0;
    subfunction_names.clear ();

    delete stmt_list;
    stmt_list = 0;

    lexer.reset ();

    yypstate_delete (static_cast<yypstate *> (parser_state));
    parser_state = yypstate_new ();
  }
}

// Error mesages for mismatched end tokens.

static std::string
end_token_as_string (token::end_tok_type ettype)
{
  std::string retval = "<unknown>";

  switch (ettype)
    {
    case token::simple_end:
      retval = "end";
      break;

    case token::classdef_end:
      retval = "endclassdef";
      break;

    case token::enumeration_end:
      retval = "endenumeration";
      break;

    case token::events_end:
      retval = "endevents";
      break;

    case token::for_end:
      retval = "endfor";
      break;

    case token::function_end:
      retval = "endfunction";
      break;

    case token::if_end:
      retval = "endif";
      break;

    case token::methods_end:
      retval = "endmethods";
      break;

    case token::parfor_end:
      retval = "endparfor";
      break;

    case token::properties_end:
      retval = "endproperties";
      break;

    case token::switch_end:
      retval = "endswitch";
      break;

    case token::try_catch_end:
      retval = "end_try_catch";
      break;

    case token::unwind_protect_end:
      retval = "end_unwind_protect";
      break;

    case token::while_end:
      retval = "endwhile";
      break;

    default:
      panic_impossible ();
      break;
    }

  return retval;
}

namespace octave
{
  void
  base_parser::end_token_error (token *tok, token::end_tok_type expected)
  {
    std::string msg = ("'" + end_token_as_string (expected)
                       + "' command matched by '"
                       + end_token_as_string (tok->ettype ()) + "'");

    bison_error (msg, tok->line (), tok->column ());
  }

  // Check to see that end tokens are properly matched.

  bool
  base_parser::end_token_ok (token *tok, token::end_tok_type expected)
  {
    token::end_tok_type ettype = tok->ettype ();

    return ettype == expected || ettype == token::simple_end;
  }

  // Maybe print a warning if an assignment expression is used as the
  // test in a logical expression.

  void
  base_parser::maybe_warn_assign_as_truth_value (tree_expression *expr)
  {
    if (expr->is_assignment_expression ()
        && expr->paren_count () < 2)
      {
        if (lexer.fcn_file_full_name.empty ())
          warning_with_id
            ("Octave:assign-as-truth-value",
             "suggest parenthesis around assignment used as truth value");
        else
          warning_with_id
            ("Octave:assign-as-truth-value",
             "suggest parenthesis around assignment used as truth value near line %d, column %d in file '%s'",
             expr->line (), expr->column (), lexer.fcn_file_full_name.c_str ());
      }
  }

  // Maybe print a warning about switch labels that aren't constants.

  void
  base_parser::maybe_warn_variable_switch_label (tree_expression *expr)
  {
    if (! expr->is_constant ())
      {
        if (lexer.fcn_file_full_name.empty ())
          warning_with_id ("Octave:variable-switch-label",
                           "variable switch label");
        else
          warning_with_id
            ("Octave:variable-switch-label",
             "variable switch label near line %d, column %d in file '%s'",
             expr->line (), expr->column (), lexer.fcn_file_full_name.c_str ());
      }
  }

  // Finish building a range.

  tree_expression *
  base_parser::finish_colon_expression (tree_colon_expression *e)
  {
    tree_expression *retval = e;

    octave::unwind_protect frame;

    frame.protect_var (discard_error_messages);
    frame.protect_var (discard_warning_messages);

    discard_error_messages = true;
    discard_warning_messages = true;

    tree_expression *base = e->base ();
    tree_expression *limit = e->limit ();
    tree_expression *incr = e->increment ();

    if (base)
      {
        if (limit)
          {
            if (base->is_constant () && limit->is_constant ()
                && (! incr || (incr && incr->is_constant ())))
              {
                try
                  {
                    octave_value tmp = e->rvalue1 ();

                    tree_constant *tc_retval
                      = new tree_constant (tmp, base->line (), base->column ());

                    std::ostringstream buf;

                    tree_print_code tpc (buf);

                    e->accept (tpc);

                    tc_retval->stash_original_text (buf.str ());

                    delete e;

                    retval = tc_retval;
                  }
                catch (const octave::execution_exception&)
                  {
                    recover_from_exception ();
                  }
              }
          }
        else
          {
            e->preserve_base ();
            delete e;

            retval = base;
          }
      }

    return retval;
  }

  // Make a constant.

  tree_constant *
  base_parser::make_constant (int op, token *tok_val)
  {
    int l = tok_val->line ();
    int c = tok_val->column ();

    tree_constant *retval = 0;

    switch (op)
      {
      case NUM:
        {
          octave_value tmp (tok_val->number ());
          retval = new tree_constant (tmp, l, c);
          retval->stash_original_text (tok_val->text_rep ());
        }
        break;

      case IMAG_NUM:
        {
          octave_value tmp (Complex (0.0, tok_val->number ()));
          retval = new tree_constant (tmp, l, c);
          retval->stash_original_text (tok_val->text_rep ());
        }
        break;

      case DQ_STRING:
      case SQ_STRING:
        {
          std::string txt = tok_val->text ();

          char delim = op == DQ_STRING ? '"' : '\'';
          octave_value tmp (txt, delim);

          if (txt.empty ())
            {
              if (op == DQ_STRING)
                tmp = octave_null_str::instance;
              else
                tmp = octave_null_sq_str::instance;
            }

          retval = new tree_constant (tmp, l, c);

          if (op == DQ_STRING)
            txt = undo_string_escapes (txt);

          // FIXME: maybe this should also be handled by
          // tok_val->text_rep () for character strings?
          retval->stash_original_text (delim + txt + delim);
        }
        break;

      default:
        panic_impossible ();
        break;
      }

    return retval;
  }

  // Make a function handle.

  tree_fcn_handle *
  base_parser::make_fcn_handle (token *tok_val)
  {
    int l = tok_val->line ();
    int c = tok_val->column ();

    tree_fcn_handle *retval = new tree_fcn_handle (tok_val->text (), l, c);

    return retval;
  }

  // Make an anonymous function handle.

  tree_anon_fcn_handle *
  base_parser::make_anon_fcn_handle (tree_parameter_list *param_list,
                                     tree_statement *stmt)
  {
    // FIXME: need to get these from the location of the @ symbol.
    int l = lexer.input_line_number;
    int c = lexer.current_input_column;

    tree_parameter_list *ret_list = 0;

    symbol_table::scope_id fcn_scope = lexer.symtab_context.curr_scope ();

    lexer.symtab_context.pop ();

    stmt->set_print_flag (false);

    tree_statement_list *body = new tree_statement_list (stmt);

    body->mark_as_anon_function_body ();

    tree_anon_fcn_handle *retval
      = new tree_anon_fcn_handle (param_list, ret_list, body, fcn_scope, l, c);
    // FIXME: Stash the filename.  This does not work and produces
    // errors when executed.
    //retval->stash_file_name (lexer.fcn_file_name);

    return retval;
  }

  // Build a binary expression.

  tree_expression *
  base_parser::make_binary_op (int op, tree_expression *op1,
                               token *tok_val, tree_expression *op2)
  {
    octave_value::binary_op t = octave_value::unknown_binary_op;

    switch (op)
      {
      case POW:
        t = octave_value::op_pow;
        break;

      case EPOW:
        t = octave_value::op_el_pow;
        break;

      case '+':
        t = octave_value::op_add;
        break;

      case '-':
        t = octave_value::op_sub;
        break;

      case '*':
        t = octave_value::op_mul;
        break;

      case '/':
        t = octave_value::op_div;
        break;

      case EMUL:
        t = octave_value::op_el_mul;
        break;

      case EDIV:
        t = octave_value::op_el_div;
        break;

      case LEFTDIV:
        t = octave_value::op_ldiv;
        break;

      case ELEFTDIV:
        t = octave_value::op_el_ldiv;
        break;

      case EXPR_LT:
        t = octave_value::op_lt;
        break;

      case EXPR_LE:
        t = octave_value::op_le;
        break;

      case EXPR_EQ:
        t = octave_value::op_eq;
        break;

      case EXPR_GE:
        t = octave_value::op_ge;
        break;

      case EXPR_GT:
        t = octave_value::op_gt;
        break;

      case EXPR_NE:
        t = octave_value::op_ne;
        break;

      case EXPR_AND:
        t = octave_value::op_el_and;
        break;

      case EXPR_OR:
        t = octave_value::op_el_or;
        break;

      default:
        panic_impossible ();
        break;
      }

    int l = tok_val->line ();
    int c = tok_val->column ();

    return maybe_compound_binary_expression (op1, op2, l, c, t);
  }

  // Build a boolean expression.

  tree_expression *
  base_parser::make_boolean_op (int op, tree_expression *op1,
                                token *tok_val, tree_expression *op2)
  {
    tree_boolean_expression::type t;

    switch (op)
      {
      case EXPR_AND_AND:
        t = tree_boolean_expression::bool_and;
        break;

      case EXPR_OR_OR:
        t = tree_boolean_expression::bool_or;
        break;

      default:
        panic_impossible ();
        break;
      }

    int l = tok_val->line ();
    int c = tok_val->column ();

    return new tree_boolean_expression (op1, op2, l, c, t);
  }

  // Build a prefix expression.

  tree_expression *
  base_parser::make_prefix_op (int op, tree_expression *op1, token *tok_val)
  {
    octave_value::unary_op t = octave_value::unknown_unary_op;

    switch (op)
      {
      case EXPR_NOT:
        t = octave_value::op_not;
        break;

      case '+':
        t = octave_value::op_uplus;
        break;

      case '-':
        t = octave_value::op_uminus;
        break;

      case PLUS_PLUS:
        t = octave_value::op_incr;
        break;

      case MINUS_MINUS:
        t = octave_value::op_decr;
        break;

      default:
        panic_impossible ();
        break;
      }

    int l = tok_val->line ();
    int c = tok_val->column ();

    return new tree_prefix_expression (op1, l, c, t);
  }

  // Build a postfix expression.

  tree_expression *
  base_parser::make_postfix_op (int op, tree_expression *op1, token *tok_val)
  {
    octave_value::unary_op t = octave_value::unknown_unary_op;

    switch (op)
      {
      case HERMITIAN:
        t = octave_value::op_hermitian;
        break;

      case TRANSPOSE:
        t = octave_value::op_transpose;
        break;

      case PLUS_PLUS:
        t = octave_value::op_incr;
        break;

      case MINUS_MINUS:
        t = octave_value::op_decr;
        break;

      default:
        panic_impossible ();
        break;
      }

    int l = tok_val->line ();
    int c = tok_val->column ();

    return new tree_postfix_expression (op1, l, c, t);
  }

  // Build an unwind-protect command.

  tree_command *
  base_parser::make_unwind_command (token *unwind_tok,
                                    tree_statement_list *body,
                                    tree_statement_list *cleanup_stmts,
                                    token *end_tok,
                                    octave_comment_list *lc,
                                    octave_comment_list *mc)
  {
    tree_command *retval = 0;

    if (end_token_ok (end_tok, token::unwind_protect_end))
      {
        octave_comment_list *tc = lexer.comment_buf.get_comment ();

        int l = unwind_tok->line ();
        int c = unwind_tok->column ();

        retval = new tree_unwind_protect_command (body, cleanup_stmts,
                                                  lc, mc, tc, l, c);
      }
    else
      {
        delete body;
        delete cleanup_stmts;

        end_token_error (end_tok, token::unwind_protect_end);
      }

    return retval;
  }

  // Build a try-catch command.

  tree_command *
  base_parser::make_try_command (token *try_tok,
                                 tree_statement_list *body,
                                 char catch_sep,
                                 tree_statement_list *cleanup_stmts,
                                 token *end_tok,
                                 octave_comment_list *lc,
                                 octave_comment_list *mc)
  {
    tree_command *retval = 0;

    if (end_token_ok (end_tok, token::try_catch_end))
      {
        octave_comment_list *tc = lexer.comment_buf.get_comment ();

        int l = try_tok->line ();
        int c = try_tok->column ();

        tree_identifier *id = 0;

        if (! catch_sep && cleanup_stmts && ! cleanup_stmts->empty ())
          {
            tree_statement *stmt = cleanup_stmts->front ();

            if (stmt)
              {
                tree_expression *expr = stmt->expression ();

                if (expr && expr->is_identifier ())
                  {
                    id = dynamic_cast<tree_identifier *> (expr);

                    cleanup_stmts->pop_front ();

                    stmt->set_expression (0);
                    delete stmt;
                  }
              }
          }

        retval = new tree_try_catch_command (body, cleanup_stmts, id,
                                             lc, mc, tc, l, c);
      }
    else
      {
        delete body;
        delete cleanup_stmts;

        end_token_error (end_tok, token::try_catch_end);
      }

    return retval;
  }

  // Build a while command.

  tree_command *
  base_parser::make_while_command (token *while_tok,
                                   tree_expression *expr,
                                   tree_statement_list *body,
                                   token *end_tok,
                                   octave_comment_list *lc)
  {
    tree_command *retval = 0;

    maybe_warn_assign_as_truth_value (expr);

    if (end_token_ok (end_tok, token::while_end))
      {
        octave_comment_list *tc = lexer.comment_buf.get_comment ();

        lexer.looping--;

        int l = while_tok->line ();
        int c = while_tok->column ();

        retval = new tree_while_command (expr, body, lc, tc, l, c);
      }
    else
      {
        delete expr;
        delete body;

        end_token_error (end_tok, token::while_end);
      }

    return retval;
  }

  // Build a do-until command.

  tree_command *
  base_parser::make_do_until_command (token *until_tok,
                                      tree_statement_list *body,
                                      tree_expression *expr,
                                      octave_comment_list *lc)
  {
    maybe_warn_assign_as_truth_value (expr);

    octave_comment_list *tc = lexer.comment_buf.get_comment ();

    lexer.looping--;

    int l = until_tok->line ();
    int c = until_tok->column ();

    return new tree_do_until_command (expr, body, lc, tc, l, c);
  }

  // Build a for command.

  tree_command *
  base_parser::make_for_command (int tok_id, token *for_tok,
                                 tree_argument_list *lhs,
                                 tree_expression *expr,
                                 tree_expression *maxproc,
                                 tree_statement_list *body,
                                 token *end_tok,
                                 octave_comment_list *lc)
  {
    tree_command *retval = 0;

    bool parfor = tok_id == PARFOR;

    if (end_token_ok (end_tok, parfor ? token::parfor_end : token::for_end))
      {
        expr->mark_as_for_cmd_expr ();

        octave_comment_list *tc = lexer.comment_buf.get_comment ();

        lexer.looping--;

        int l = for_tok->line ();
        int c = for_tok->column ();

        if (lhs->length () == 1)
          {
            tree_expression *tmp = lhs->remove_front ();

            retval = new tree_simple_for_command (parfor, tmp, expr, maxproc,
                                                  body, lc, tc, l, c);

            delete lhs;
          }
        else
          {
            if (parfor)
              {
                delete lhs;
                delete expr;
                delete maxproc;
                delete body;

                bison_error ("invalid syntax for parfor statement");
              }
            else
              retval = new tree_complex_for_command (lhs, expr, body,
                                                     lc, tc, l, c);
          }
      }
    else
      {
        delete lhs;
        delete expr;
        delete maxproc;
        delete body;

        end_token_error (end_tok, parfor ? token::parfor_end : token::for_end);
      }

    return retval;
  }

  // Build a break command.

  tree_command *
  base_parser::make_break_command (token *break_tok)
  {
    int l = break_tok->line ();
    int c = break_tok->column ();

    return new tree_break_command (l, c);
  }

  // Build a continue command.

  tree_command *
  base_parser::make_continue_command (token *continue_tok)
  {
    int l = continue_tok->line ();
    int c = continue_tok->column ();

    return new tree_continue_command (l, c);
  }

  // Build a return command.

  tree_command *
  base_parser::make_return_command (token *return_tok)
  {
    int l = return_tok->line ();
    int c = return_tok->column ();

    return new tree_return_command (l, c);
  }

  // Start an if command.

  tree_if_command_list *
  base_parser::start_if_command (tree_expression *expr,
                                 tree_statement_list *list)
  {
    maybe_warn_assign_as_truth_value (expr);

    tree_if_clause *t = new tree_if_clause (expr, list);

    return new tree_if_command_list (t);
  }

  // Finish an if command.

  tree_if_command *
  base_parser::finish_if_command (token *if_tok,
                                  tree_if_command_list *list,
                                  token *end_tok,
                                  octave_comment_list *lc)
  {
    tree_if_command *retval = 0;

    if (end_token_ok (end_tok, token::if_end))
      {
        octave_comment_list *tc = lexer.comment_buf.get_comment ();

        int l = if_tok->line ();
        int c = if_tok->column ();

        if (list && ! list->empty ())
          {
            tree_if_clause *elt = list->front ();

            if (elt)
              {
                elt->line (l);
                elt->column (c);
              }
          }

        retval = new tree_if_command (list, lc, tc, l, c);
      }
    else
      {
        delete list;

        end_token_error (end_tok, token::if_end);
      }

    return retval;
  }

  // Build an elseif clause.

  tree_if_clause *
  base_parser::make_elseif_clause (token *elseif_tok,
                                   tree_expression *expr,
                                   tree_statement_list *list,
                                   octave_comment_list *lc)
  {
    maybe_warn_assign_as_truth_value (expr);

    int l = elseif_tok->line ();
    int c = elseif_tok->column ();

    return new tree_if_clause (expr, list, lc, l, c);
  }

  // Finish a switch command.

  tree_switch_command *
  base_parser::finish_switch_command (token *switch_tok,
                                      tree_expression *expr,
                                      tree_switch_case_list *list,
                                      token *end_tok,
                                      octave_comment_list *lc)
  {
    tree_switch_command *retval = 0;

    if (end_token_ok (end_tok, token::switch_end))
      {
        octave_comment_list *tc = lexer.comment_buf.get_comment ();

        int l = switch_tok->line ();
        int c = switch_tok->column ();

        if (list && ! list->empty ())
          {
            tree_switch_case *elt = list->front ();

            if (elt)
              {
                elt->line (l);
                elt->column (c);
              }
          }

        retval = new tree_switch_command (expr, list, lc, tc, l, c);
      }
    else
      {
        delete expr;
        delete list;

        end_token_error (end_tok, token::switch_end);
      }

    return retval;
  }

  // Build a switch case.

  tree_switch_case *
  base_parser::make_switch_case (token *case_tok,
                                 tree_expression *expr,
                                 tree_statement_list *list,
                                 octave_comment_list *lc)
  {
    maybe_warn_variable_switch_label (expr);

    int l = case_tok->line ();
    int c = case_tok->column ();

    return new tree_switch_case (expr, list, lc, l, c);
  }

  // Build an assignment to a variable.

  tree_expression *
  base_parser::make_assign_op (int op, tree_argument_list *lhs,
                               token *eq_tok, tree_expression *rhs)
  {
    octave_value::assign_op t = octave_value::unknown_assign_op;

    switch (op)
      {
      case '=':
        t = octave_value::op_asn_eq;
        break;

      case ADD_EQ:
        t = octave_value::op_add_eq;
        break;

      case SUB_EQ:
        t = octave_value::op_sub_eq;
        break;

      case MUL_EQ:
        t = octave_value::op_mul_eq;
        break;

      case DIV_EQ:
        t = octave_value::op_div_eq;
        break;

      case LEFTDIV_EQ:
        t = octave_value::op_ldiv_eq;
        break;

      case POW_EQ:
        t = octave_value::op_pow_eq;
        break;

      case EMUL_EQ:
        t = octave_value::op_el_mul_eq;
        break;

      case EDIV_EQ:
        t = octave_value::op_el_div_eq;
        break;

      case ELEFTDIV_EQ:
        t = octave_value::op_el_ldiv_eq;
        break;

      case EPOW_EQ:
        t = octave_value::op_el_pow_eq;
        break;

      case AND_EQ:
        t = octave_value::op_el_and_eq;
        break;

      case OR_EQ:
        t = octave_value::op_el_or_eq;
        break;

      default:
        panic_impossible ();
        break;
      }

    int l = eq_tok->line ();
    int c = eq_tok->column ();

    if (! lhs->is_simple_assign_lhs () && t != octave_value::op_asn_eq)
      {
        // Multiple assignments like [x,y] OP= rhs are only valid for
        // '=', not '+=', etc.

        delete lhs;
        delete rhs;

        bison_error ("computed multiple assignment not allowed", l, c);

        return 0;
      }

    if (lhs->is_simple_assign_lhs ())
      {
        // We are looking at a simple assignment statement like x = rhs;

        tree_expression *tmp = lhs->remove_front ();

        if ((tmp->is_identifier () || tmp->is_index_expression ())
            && is_keyword (tmp->name ()))
          {
            std::string kw = tmp->name ();

            delete tmp;
            delete lhs;
            delete rhs;

            bison_error ("invalid assignment to keyword \"" + kw + "\"", l, c);

            return 0;
          }

        delete lhs;

        return new tree_simple_assignment (tmp, rhs, false, l, c, t);
      }
    else
      {
        std::list<std::string> names = lhs->variable_names ();

        for (std::list<std::string>::const_iterator it = names.begin ();
             it != names.end (); it++)
          {
            std::string kw = *it;

            if (is_keyword (kw))
              {
                delete lhs;
                delete rhs;

                bison_error ("invalid assignment to keyword \"" + kw + "\"",
                             l, c);

                return 0;
              }
          }

        return new tree_multi_assignment (lhs, rhs, false, l, c);
      }
  }

  // Define a script.

  void
  base_parser::make_script (tree_statement_list *cmds,
                            tree_statement *end_script)
  {
    if (! cmds)
      cmds = new tree_statement_list ();

    cmds->append (end_script);

    octave_user_script *script
      = new octave_user_script (lexer.fcn_file_full_name,
                                lexer.fcn_file_name,
                                cmds, lexer.help_text);

    lexer.help_text = "";

    octave::sys::time now;

    script->stash_fcn_file_time (now);

    primary_fcn_ptr = script;
  }

  // Begin defining a function.

  octave_user_function *
  base_parser::start_function (tree_parameter_list *param_list,
                               tree_statement_list *body,
                               tree_statement *end_fcn_stmt)
  {
    // We'll fill in the return list later.

    if (! body)
      body = new tree_statement_list ();

    body->append (end_fcn_stmt);

    octave_user_function *fcn
      = new octave_user_function (lexer.symtab_context.curr_scope (),
                                  param_list, 0, body);

    if (fcn)
      {
        octave_comment_list *tc = lexer.comment_buf.get_comment ();

        fcn->stash_trailing_comment (tc);
        fcn->stash_fcn_end_location (end_fcn_stmt->line (),
                                     end_fcn_stmt->column ());
      }

    return fcn;
  }

  tree_statement *
  base_parser::make_end (const std::string& type, bool eof, int l, int c)
  {
    return make_statement (new tree_no_op_command (type, eof, l, c));
  }

  // Do most of the work for defining a function.

  octave_user_function *
  base_parser::frob_function (const std::string& fname,
                              octave_user_function *fcn)
  {
    std::string id_name = fname;

    // If input is coming from a file, issue a warning if the name of
    // the file does not match the name of the function stated in the
    // file.  Matlab doesn't provide a diagnostic (it ignores the stated
    // name).
    if (! autoloading && lexer.reading_fcn_file
        && curr_fcn_depth == 1 && ! parsing_subfunctions)
      {
        // FIXME: should lexer.fcn_file_name already be
        // preprocessed when we get here?  It seems to only be a
        // problem with relative filenames.

        std::string nm = lexer.fcn_file_name;

        size_t pos = nm.find_last_of (octave::sys::file_ops::dir_sep_chars ());

        if (pos != std::string::npos)
          nm = lexer.fcn_file_name.substr (pos+1);

        if (nm != id_name)
          {
            warning_with_id
              ("Octave:function-name-clash",
               "function name '%s' does not agree with function filename '%s'",
               id_name.c_str (), lexer.fcn_file_full_name.c_str ());

            id_name = nm;
          }
      }

    if (lexer.reading_fcn_file || lexer.reading_classdef_file || autoloading)
      {
        octave::sys::time now;

        fcn->stash_fcn_file_name (lexer.fcn_file_full_name);
        fcn->stash_fcn_file_time (now);
        fcn->mark_as_system_fcn_file ();

        if (fcn_file_from_relative_lookup)
          fcn->mark_relative ();

        if (curr_fcn_depth > 1 || parsing_subfunctions)
          {
            fcn->stash_parent_fcn_name (lexer.fcn_file_name);

            if (curr_fcn_depth > 1)
              fcn->stash_parent_fcn_scope (function_scopes[function_scopes.size ()-2]);
            else
              fcn->stash_parent_fcn_scope (primary_fcn_scope);
          }

        if (lexer.parsing_class_method)
          {
            if (curr_class_name == id_name)
              fcn->mark_as_class_constructor ();
            else
              fcn->mark_as_class_method ();

            fcn->stash_dispatch_class (curr_class_name);
          }

        std::string nm = fcn->fcn_file_name ();

        octave::sys::file_stat fs (nm);

        if (fs && fs.is_newer (now))
          warning_with_id ("Octave:future-time-stamp",
                           "time stamp for '%s' is in the future", nm.c_str ());
      }
    else if (! input_from_tmp_history_file
             && ! lexer.force_script
             && lexer.reading_script_file
             && lexer.fcn_file_name == id_name)
      {
        warning ("function '%s' defined within script file '%s'",
                 id_name.c_str (), lexer.fcn_file_full_name.c_str ());
      }

    fcn->stash_function_name (id_name);

    if (! lexer.help_text.empty () && curr_fcn_depth == 1
        && ! parsing_subfunctions)
      {
        fcn->document (lexer.help_text);

        lexer.help_text = "";
      }

    if (lexer.reading_fcn_file && curr_fcn_depth == 1
        && ! parsing_subfunctions)
      primary_fcn_ptr = fcn;

    return fcn;
  }

  tree_function_def *
  base_parser::finish_function (tree_parameter_list *ret_list,
                                octave_user_function *fcn,
                                octave_comment_list *lc,
                                int l, int c)
  {
    tree_function_def *retval = 0;

    if (ret_list)
      ret_list->mark_as_formal_parameters ();

    if (fcn)
      {
        std::string nm = fcn->name ();
        std::string file = fcn->fcn_file_name ();

        std::string tmp = nm;
        if (! file.empty ())
          tmp += ": " + file;

        symbol_table::cache_name (fcn->scope (), tmp);

        if (lc)
          fcn->stash_leading_comment (lc);

        fcn->define_ret_list (ret_list);

        if (curr_fcn_depth > 1 || parsing_subfunctions)
          {
            fcn->mark_as_subfunction ();
            fcn->stash_fcn_location (l, c);

            subfunction_names.push_back (nm);

            if (endfunction_found && function_scopes.size () > 1)
              {
                symbol_table::scope_id pscope
                  = function_scopes[function_scopes.size ()-2];

                symbol_table::install_nestfunction (nm, octave_value (fcn),
                                                    pscope);
              }
            else
              symbol_table::install_subfunction (nm, octave_value (fcn),
                                                 primary_fcn_scope);
          }

        if (curr_fcn_depth == 1 && fcn)
          symbol_table::update_nest (fcn->scope ());

        if (! lexer.reading_fcn_file && curr_fcn_depth == 1)
          {
            // We are either reading a script file or defining a function
            // at the command line, so this definition creates a
            // tree_function object that is placed in the parse tree.
            // Otherwise, it is just inserted in the symbol table,
            // either as a subfunction or nested function (see above),
            // or as the primary function for the file, via
            // primary_fcn_ptr (see also load_fcn_from_file,,
            // parse_fcn_file, and
            // symbol_table::fcn_info::fcn_info_rep::find_user_function).

            retval = new tree_function_def (fcn);
          }
      }

    return retval;
  }

  void
  base_parser::recover_from_parsing_function (void)
  {
    lexer.symtab_context.pop ();

    if (lexer.reading_fcn_file && curr_fcn_depth == 1
        && ! parsing_subfunctions)
      parsing_subfunctions = true;

    curr_fcn_depth--;
    function_scopes.pop_back ();

    lexer.defining_func--;
    lexer.parsed_function_name.pop ();
    lexer.looking_at_return_list = false;
    lexer.looking_at_parameter_list = false;
  }

  tree_funcall *
  base_parser::make_superclass_ref (const std::string& method_nm,
                                    const std::string& class_nm)
  {
    octave_value_list args;

    args(1) = class_nm;
    args(0) = method_nm;

    octave_value fcn
      = symbol_table::find_built_in_function ("__superclass_reference__");

    return new tree_funcall (fcn, args);
  }

  tree_funcall *
  base_parser::make_meta_class_query (const std::string& class_nm)
  {
    octave_value_list args;

    args(0) = class_nm;

    octave_value fcn
      = symbol_table::find_built_in_function ("__meta_class_query__");

    return new tree_funcall (fcn, args);
  }

  // A CLASSDEF block defines a class that has a constructor and other
  // methods, but it is not an executable command.  Parsing the block
  // makes some changes in the symbol table (inserting the constructor
  // and methods, and adding to the list of known objects) and creates
  // a parse tree containing meta information about the class.

  tree_classdef *
  base_parser::make_classdef (token *tok_val,
                              tree_classdef_attribute_list *a,
                              tree_identifier *id,
                              tree_classdef_superclass_list *sc,
                              tree_classdef_body *body, token *end_tok,
                              octave_comment_list *lc)
  {
    tree_classdef *retval = 0;

    std::string cls_name = id->name ();

    std::string nm = lexer.fcn_file_name;

    size_t pos = nm.find_last_of (octave::sys::file_ops::dir_sep_chars ());

    if (pos != std::string::npos)
      nm = lexer.fcn_file_name.substr (pos+1);

    if (nm != cls_name)
      {
        delete a;
        delete id;
        delete sc;
        delete body;

        bison_error ("invalid classdef definition, the class name must match the filename");

      }
    else
      {
        if (end_token_ok (end_tok, token::classdef_end))
          {
            octave_comment_list *tc = lexer.comment_buf.get_comment ();

            int l = tok_val->line ();
            int c = tok_val->column ();

            if (! body)
              body = new tree_classdef_body ();

            retval = new tree_classdef (a, id, sc, body, lc, tc,
                                        curr_package_name, l, c);
          }
        else
          {
            delete a;
            delete id;
            delete sc;
            delete body;

            end_token_error (end_tok, token::switch_end);
          }
      }

    return retval;
  }

  tree_classdef_properties_block *
  base_parser::make_classdef_properties_block (token *tok_val,
                                               tree_classdef_attribute_list *a,
                                               tree_classdef_property_list *plist,
                                               token *end_tok,
                                               octave_comment_list *lc)
  {
    tree_classdef_properties_block *retval = 0;

    if (end_token_ok (end_tok, token::properties_end))
      {
        octave_comment_list *tc = lexer.comment_buf.get_comment ();

        int l = tok_val->line ();
        int c = tok_val->column ();

        if (! plist)
          plist = new tree_classdef_property_list ();

        retval = new tree_classdef_properties_block (a, plist, lc, tc, l, c);
      }
    else
      {
        delete a;
        delete plist;

        end_token_error (end_tok, token::properties_end);
      }

    return retval;
  }

  tree_classdef_methods_block *
  base_parser::make_classdef_methods_block (token *tok_val,
                                            tree_classdef_attribute_list *a,
                                            tree_classdef_methods_list *mlist,
                                            token *end_tok,
                                            octave_comment_list *lc)
  {
    tree_classdef_methods_block *retval = 0;

    if (end_token_ok (end_tok, token::methods_end))
      {
        octave_comment_list *tc = lexer.comment_buf.get_comment ();

        int l = tok_val->line ();
        int c = tok_val->column ();

        if (! mlist)
          mlist = new tree_classdef_methods_list ();

        retval = new tree_classdef_methods_block (a, mlist, lc, tc, l, c);
      }
    else
      {
        delete a;
        delete mlist;

        end_token_error (end_tok, token::methods_end);
      }

    return retval;
  }

  tree_classdef_events_block *
  base_parser::make_classdef_events_block (token *tok_val,
                                           tree_classdef_attribute_list *a,
                                           tree_classdef_events_list *elist,
                                           token *end_tok,
                                           octave_comment_list *lc)
  {
    tree_classdef_events_block *retval = 0;

    if (end_token_ok (end_tok, token::events_end))
      {
        octave_comment_list *tc = lexer.comment_buf.get_comment ();

        int l = tok_val->line ();
        int c = tok_val->column ();

        if (! elist)
          elist = new tree_classdef_events_list ();

        retval = new tree_classdef_events_block (a, elist, lc, tc, l, c);
      }
    else
      {
        delete a;
        delete elist;

        end_token_error (end_tok, token::events_end);
      }

    return retval;
  }

  tree_classdef_enum_block *
  base_parser::make_classdef_enum_block (token *tok_val,
                                         tree_classdef_attribute_list *a,
                                         tree_classdef_enum_list *elist,
                                         token *end_tok,
                                         octave_comment_list *lc)
  {
    tree_classdef_enum_block *retval = 0;

    if (end_token_ok (end_tok, token::enumeration_end))
      {
        octave_comment_list *tc = lexer.comment_buf.get_comment ();

        int l = tok_val->line ();
        int c = tok_val->column ();

        if (! elist)
          elist = new tree_classdef_enum_list ();

        retval = new tree_classdef_enum_block (a, elist, lc, tc, l, c);
      }
    else
      {
        delete a;
        delete elist;

        end_token_error (end_tok, token::enumeration_end);
      }

    return retval;
  }

  octave_user_function*
  base_parser::start_classdef_external_method (tree_identifier *id,
                                               tree_parameter_list *pl)
  {
    octave_user_function* retval = 0;

    // External methods are only allowed within @-folders. In this case,
    // curr_class_name will be non-empty.

    if (! curr_class_name.empty ())
      {

        std::string mname = id->name ();

        // Methods that cannot be declared outside the classdef file:
        // - methods with '.' character (e.g. property accessors)
        // - class constructor
        // - `delete'

        if (mname.find_first_of (".") == std::string::npos
            && mname != "delete"
            && mname != curr_class_name)
          {
            // Create a dummy function that is used until the real method
            // is loaded.

            retval = new octave_user_function (-1, pl);

            retval->stash_function_name (mname);

            int l = id->line ();
            int c = id->column ();

            retval->stash_fcn_location (l, c);
          }
        else
          bison_error ("invalid external method declaration, an external "
                       "method cannot be the class constructor, `delete' "
                       "or have a dot (.) character in its name");
      }
    else
      bison_error ("external methods are only allowed in @-folders");

    if (! retval)
      delete id;

    return retval;
  }

  tree_function_def *
  base_parser::finish_classdef_external_method (octave_user_function *fcn,
                                                tree_parameter_list *ret_list,
                                                octave_comment_list *cl)
  {
    if (ret_list)
      fcn->define_ret_list (ret_list);

    if (cl)
      fcn->stash_leading_comment (cl);

    int l = fcn->beginning_line ();
    int c = fcn->beginning_column ();

    return new tree_function_def (fcn, l, c);
  }

  // Make an index expression.

  tree_index_expression *
  base_parser::make_index_expression (tree_expression *expr,
                                      tree_argument_list *args,
                                      char type)
  {
    tree_index_expression *retval = 0;

    if (args && args->has_magic_tilde ())
      {
        delete expr;
        delete args;

        bison_error ("invalid use of empty argument (~) in index expression");
      }
    else
      {
        int l = expr->line ();
        int c = expr->column ();

        if (! expr->is_postfix_indexed ())
          expr->set_postfix_index (type);

        if (expr->is_index_expression ())
          {
            tree_index_expression *tmp =
              static_cast<tree_index_expression *> (expr);

            tmp->append (args, type);

            retval = tmp;
          }
        else
          retval = new tree_index_expression (expr, args, l, c, type);
      }

    return retval;
  }

  // Make an indirect reference expression.

  tree_index_expression *
  base_parser::make_indirect_ref (tree_expression *expr,
                                  const std::string& elt)
  {
    tree_index_expression *retval = 0;

    int l = expr->line ();
    int c = expr->column ();

    if (! expr->is_postfix_indexed ())
      expr->set_postfix_index ('.');

    if (expr->is_index_expression ())
      {
        tree_index_expression *tmp = static_cast<tree_index_expression *> (expr);

        tmp->append (elt);

        retval = tmp;
      }
    else
      retval = new tree_index_expression (expr, elt, l, c);

    lexer.looking_at_indirect_ref = false;

    return retval;
  }

  // Make an indirect reference expression with dynamic field name.

  tree_index_expression *
  base_parser::make_indirect_ref (tree_expression *expr,
                                  tree_expression *elt)
  {
    tree_index_expression *retval = 0;

    int l = expr->line ();
    int c = expr->column ();

    if (! expr->is_postfix_indexed ())
      expr->set_postfix_index ('.');

    if (expr->is_index_expression ())
      {
        tree_index_expression *tmp = static_cast<tree_index_expression *> (expr);

        tmp->append (elt);

        retval = tmp;
      }
    else
      retval = new tree_index_expression (expr, elt, l, c);

    lexer.looking_at_indirect_ref = false;

    return retval;
  }

  // Make a declaration command.

  tree_decl_command *
  base_parser::make_decl_command (int tok, token *tok_val,
                                  tree_decl_init_list *lst)
  {
    tree_decl_command *retval = 0;

    int l = tok_val->line ();
    int c = tok_val->column ();

    switch (tok)
      {
      case GLOBAL:
        retval = new tree_global_command (lst, l, c);
        break;

      case PERSISTENT:
        if (curr_fcn_depth > 0)
          retval = new tree_persistent_command (lst, l, c);
        else
          {
            if (lexer.reading_script_file)
              warning ("ignoring persistent declaration near line %d of file '%s'",
                       l, lexer.fcn_file_full_name.c_str ());
            else
              warning ("ignoring persistent declaration near line %d", l);
          }
        break;

      default:
        panic_impossible ();
        break;
      }

    return retval;
  }

  bool
  base_parser::validate_array_list (tree_expression *e)
  {
    bool retval = true;

    tree_array_list *al = dynamic_cast<tree_array_list *> (e);

    for (tree_array_list::iterator i = al->begin (); i != al->end (); i++)
      {
        tree_argument_list *row = *i;

        if (row && row->has_magic_tilde ())
          {
            retval = false;

            if (e->is_matrix ())
              bison_error ("invalid use of tilde (~) in matrix expression");
            else
              bison_error ("invalid use of tilde (~) in cell expression");

            break;
          }
      }

    return retval;
  }

  tree_argument_list *
  base_parser::validate_matrix_for_assignment (tree_expression *e)
  {
    tree_argument_list *retval = 0;

    if (e->is_constant ())
      {
        octave_value ov = e->rvalue1 ();

        delete e;

        if (ov.is_empty ())
          bison_error ("invalid empty left hand side of assignment");
        else
          bison_error ("invalid constant left hand side of assignment");
      }
    else
      {
        bool is_simple_assign = true;

        tree_argument_list *tmp = 0;

        if (e->is_matrix ())
          {
            tree_matrix *mat = dynamic_cast<tree_matrix *> (e);

            if (mat && mat->size () == 1)
              {
                tmp = mat->front ();
                mat->pop_front ();
                delete e;
                is_simple_assign = false;
              }
          }
        else
          tmp = new tree_argument_list (e);

        if (tmp && tmp->is_valid_lvalue_list ())
          {
            lexer.mark_as_variables (tmp->variable_names ());
            retval = tmp;
          }
        else
          {
            delete tmp;

            bison_error ("invalid left hand side of assignment");
          }

        if (retval && is_simple_assign)
          retval->mark_as_simple_assign_lhs ();
      }

    return retval;
  }

  // Finish building an array_list.

  tree_expression *
  base_parser::finish_array_list (tree_array_list *array_list)
  {
    tree_expression *retval = array_list;

    octave::unwind_protect frame;

    frame.protect_var (discard_error_messages);
    frame.protect_var (discard_warning_messages);

    discard_error_messages = true;
    discard_warning_messages = true;

    if (array_list->all_elements_are_constant ())
      {
        try
          {
            octave_value tmp = array_list->rvalue1 ();

            tree_constant *tc_retval
              = new tree_constant (tmp, array_list->line (),
                                   array_list->column ());

            std::ostringstream buf;

            tree_print_code tpc (buf);

            array_list->accept (tpc);

            tc_retval->stash_original_text (buf.str ());

            delete array_list;

            retval = tc_retval;
          }
        catch (const octave::execution_exception&)
          {
            recover_from_exception ();
          }
      }

    return retval;
  }

  // Finish building a matrix list.

  tree_expression *
  base_parser::finish_matrix (tree_matrix *m)
  {
    return (m
            ? finish_array_list (m)
            : new tree_constant (octave_null_matrix::instance));
  }

  // Finish building a cell list.

  tree_expression *
  base_parser::finish_cell (tree_cell *c)
  {
    return (c
            ? finish_array_list (c)
            : new tree_constant (octave_value (Cell ())));
  }

  void
  base_parser::maybe_warn_missing_semi (tree_statement_list *t)
  {
    if (curr_fcn_depth > 0)
      {
        tree_statement *tmp = t->back ();

        if (tmp->is_expression ())
          warning_with_id
            ("Octave:missing-semicolon",
             "missing semicolon near line %d, column %d in file '%s'",
             tmp->line (), tmp->column (), lexer.fcn_file_full_name.c_str ());
      }
  }

  tree_statement_list *
  base_parser::set_stmt_print_flag (tree_statement_list *list,
                                    char sep, bool warn_missing_semi)
  {
    tree_statement *tmp = list->back ();

    switch (sep)
      {
      case ';':
        tmp->set_print_flag (false);
        break;

      case 0:
      case ',':
      case '\n':
        tmp->set_print_flag (true);
        if (warn_missing_semi)
          maybe_warn_missing_semi (list);
        break;

      default:
        warning ("unrecognized separator type!");
        break;
      }

    // Even if a statement is null, we add it to the list then remove it
    // here so that the print flag is applied to the correct statement.

    if (tmp->is_null_statement ())
      {
        list->pop_back ();
        delete tmp;
      }

    return list;
  }

  // Finish building a statement.
  template <typename T>
  tree_statement *
  base_parser::make_statement (T *arg)
  {
    octave_comment_list *comment = lexer.get_comment ();

    return new tree_statement (arg, comment);
  }

  tree_statement_list *
  base_parser::make_statement_list (tree_statement *stmt)
  {
    return new tree_statement_list (stmt);
  }

  tree_statement_list *
  base_parser::append_statement_list (tree_statement_list *list,
                                      char sep, tree_statement *stmt,
                                      bool warn_missing_semi)
  {
    set_stmt_print_flag (list, sep, warn_missing_semi);

    list->append (stmt);

    return list;
  }

  void
  base_parser::bison_error (const std::string& str, int l, int c)
  {
    int err_line = l < 0 ? lexer.input_line_number : l;
    int err_col = c < 0 ? lexer.current_input_column - 1 : c;

    std::ostringstream output_buf;

    if (lexer.reading_fcn_file || lexer.reading_script_file
        || lexer.reading_classdef_file)
      output_buf << "parse error near line " << err_line
                 << " of file " << lexer.fcn_file_full_name;
    else
      output_buf << "parse error:";

    if (str != "parse error")
      output_buf << "\n\n  " << str;

    output_buf << "\n\n";

    std::string curr_line = lexer.current_input_line;

    if (! curr_line.empty ())
      {
        size_t len = curr_line.length ();

        if (curr_line[len-1] == '\n')
          curr_line.resize (len-1);

        // Print the line, maybe with a pointer near the error token.

        output_buf << ">>> " << curr_line << "\n";

        if (err_col == 0)
          err_col = len;

        for (int i = 0; i < err_col + 3; i++)
          output_buf << " ";

        output_buf << "^";
      }

    output_buf << "\n";

    parse_error_msg = output_buf.str ();
  }

  int
  parser::run (void)
  {
    int status = -1;

    yypstate *pstate = static_cast<yypstate *> (parser_state);

    try
      {
        status = octave_pull_parse (pstate, *this);
      }
    catch (octave::execution_exception& e)
      {
        std::string file = lexer.fcn_file_full_name;

        if (file.empty ())
          error (e, "parse error");
        else
          error (e, "parse error in %s", file.c_str ());
      }
    catch (const octave::exit_exception&)
      {
        throw;
      }
    catch (octave::interrupt_exception &)
      {
        throw;
      }
    catch (...)
      {
        std::string file = lexer.fcn_file_full_name;

        if (file.empty ())
          error ("unexpected exception while parsing input");
        else
          error ("unexpected exception while parsing %s", file.c_str ());
      }

    if (status != 0)
      parse_error ("%s", parse_error_msg.c_str ());

    return status;
  }

  // Parse input from INPUT.  Pass TRUE for EOF if the end of INPUT should
  // finish the parse.

  int
  push_parser::run (const std::string& input, bool eof)
  {
    int status = -1;

    dynamic_cast<push_lexer&> (lexer).append_input (input, eof);

    do
      {
        YYSTYPE lval;

        int token = octave_lex (&lval, scanner);

        if (token < 0)
          {
            if (! eof && lexer.at_end_of_buffer ())
              {
                status = -1;
                break;
              }
          }

        yypstate *pstate = static_cast<yypstate *> (parser_state);

        try
          {
            status = octave_push_parse (pstate, token, &lval, *this);
          }
        catch (octave::execution_exception& e)
          {
            std::string file = lexer.fcn_file_full_name;

            if (file.empty ())
              error (e, "parse error");
            else
              error (e, "parse error in %s", file.c_str ());
          }
        catch (const octave::exit_exception&)
          {
            throw;
          }
        catch (octave::interrupt_exception &)
          {
            throw;
          }
        catch (...)
          {
            std::string file = lexer.fcn_file_full_name;

            if (file.empty ())
              error ("unexpected exception while parsing input");
            else
              error ("unexpected exception while parsing %s", file.c_str ());
          }
      }
    while (status == YYPUSH_MORE);

    if (status != 0)
      parse_error ("%s", parse_error_msg.c_str ());

    return status;
  }
}

static void
safe_fclose (FILE *f)
{
  if (f)
    fclose (static_cast<FILE *> (f));
}

static octave_function *
parse_fcn_file (const std::string& full_file, const std::string& file,
                const std::string& dispatch_type,
                const std::string& package_name,
                bool require_file, bool force_script, bool autoload,
                bool relative_lookup, const std::string& warn_for)
{
  octave::unwind_protect frame;

  octave_function *fcn_ptr = 0;

  // Open function file and parse.

  FILE *in_stream = octave::command_editor::get_input_stream ();

  frame.add_fcn (octave::command_editor::set_input_stream, in_stream);

  frame.add_fcn (octave::command_history::ignore_entries,
                 octave::command_history::ignoring_entries ());

  octave::command_history::ignore_entries ();

  FILE *ffile = 0;

  if (! full_file.empty ())
    ffile = std::fopen (full_file.c_str (), "rb");

  if (ffile)
    {
      frame.add_fcn (safe_fclose, ffile);

      // octave::base_parser constructor sets this for us.
      frame.protect_var (LEXER);

      octave::parser parser (ffile);

      parser.curr_class_name = dispatch_type;
      parser.curr_package_name = package_name;
      parser.autoloading = autoload;
      parser.fcn_file_from_relative_lookup = relative_lookup;

      parser.lexer.force_script = force_script;
      parser.lexer.prep_for_file ();
      parser.lexer.parsing_class_method = ! dispatch_type.empty ();

      parser.lexer.fcn_file_name = file;
      parser.lexer.fcn_file_full_name = full_file;

      int status = parser.run ();

      fcn_ptr = parser.primary_fcn_ptr;

      if (status == 0)
        {
          if (parser.lexer.reading_classdef_file
              && parser.classdef_object)
            {
              // Convert parse tree for classdef object to
              // meta.class info (and stash it in the symbol
              // table?).  Return pointer to constructor?

              if (fcn_ptr)
                panic_impossible ();

              bool is_at_folder = ! dispatch_type.empty ();

              fcn_ptr =
                parser.classdef_object->make_meta_class (is_at_folder);

              delete (parser.classdef_object);

              parser.classdef_object = 0;
            }
          else if (fcn_ptr)
            {
              fcn_ptr->maybe_relocate_end ();

              if (parser.parsing_subfunctions)
                {
                  if (! parser.endfunction_found)
                    parser.subfunction_names.reverse ();

                  fcn_ptr->stash_subfunction_names (parser.subfunction_names);
                }
            }
        }
      else
        error ("parse error while reading file %s", full_file.c_str ());
    }
  else if (require_file)
    error ("no such file, '%s'", full_file.c_str ());
  else if (! warn_for.empty ())
    error ("%s: unable to open file '%s'", warn_for.c_str (),
           full_file.c_str ());

  return fcn_ptr;
}

std::string
get_help_from_file (const std::string& nm, bool& symbol_found,
                    std::string& full_file)
{
  std::string retval;

  full_file = fcn_file_in_path (nm);

  std::string file = full_file;

  size_t file_len = file.length ();

  if ((file_len > 4 && file.substr (file_len-4) == ".oct")
      || (file_len > 4 && file.substr (file_len-4) == ".mex")
      || (file_len > 2 && file.substr (file_len-2) == ".m"))
    {
      file = octave::sys::env::base_pathname (file);
      file = file.substr (0, file.find_last_of ('.'));

      size_t pos = file.find_last_of (octave::sys::file_ops::dir_sep_str ());
      if (pos != std::string::npos)
        file = file.substr (pos+1);
    }

  if (! file.empty ())
    {
      symbol_found = true;

      octave_function *fcn
        = parse_fcn_file (full_file, file, "", "", true, false, false, false,
                          "");

      if (fcn)
        {
          retval = fcn->doc_string ();

          delete fcn;
        }
    }

  return retval;
}

std::string
get_help_from_file (const std::string& nm, bool& symbol_found)
{
  std::string file;
  return get_help_from_file (nm, symbol_found, file);
}

std::string
lookup_autoload (const std::string& nm)
{
  std::string retval;

  typedef std::map<std::string, std::string>::const_iterator am_iter;

  am_iter p = autoload_map.find (nm);

  if (p != autoload_map.end ())
    retval = load_path::find_file (p->second);

  return retval;
}

string_vector
autoloaded_functions (void)
{
  string_vector names (autoload_map.size ());

  octave_idx_type i = 0;
  typedef std::map<std::string, std::string>::const_iterator am_iter;
  for (am_iter p = autoload_map.begin (); p != autoload_map.end (); p++)
    names[i++] = p->first;

  return names;
}

string_vector
reverse_lookup_autoload (const std::string& nm)
{
  string_vector names;

  typedef std::map<std::string, std::string>::const_iterator am_iter;
  for (am_iter p = autoload_map.begin (); p != autoload_map.end (); p++)
    if (nm == p->second)
      names.append (p->first);

  return names;
}

octave_function *
load_fcn_from_file (const std::string& file_name, const std::string& dir_name,
                    const std::string& dispatch_type,
                    const std::string& package_name,
                    const std::string& fcn_name, bool autoload)
{
  octave_function *retval = 0;

  octave::unwind_protect frame;

  std::string nm = file_name;

  size_t nm_len = nm.length ();

  std::string file;

  bool relative_lookup = false;

  file = nm;

  if ((nm_len > 4 && nm.substr (nm_len-4) == ".oct")
      || (nm_len > 4 && nm.substr (nm_len-4) == ".mex")
      || (nm_len > 2 && nm.substr (nm_len-2) == ".m"))
    {
      nm = octave::sys::env::base_pathname (file);
      nm = nm.substr (0, nm.find_last_of ('.'));

      size_t pos = nm.find_last_of (octave::sys::file_ops::dir_sep_str ());
      if (pos != std::string::npos)
        nm = nm.substr (pos+1);
    }

  relative_lookup = ! octave::sys::env::absolute_pathname (file);

  file = octave::sys::env::make_absolute (file);

  int len = file.length ();

  if (len > 4 && file.substr (len-4, len-1) == ".oct")
    {
      if (autoload && ! fcn_name.empty ())
        nm = fcn_name;

      retval = octave_dynamic_loader::load_oct (nm, file, relative_lookup);
    }
  else if (len > 4 && file.substr (len-4, len-1) == ".mex")
    {
      // Temporarily load m-file version of mex-file, if it exists,
      // to get the help-string to use.

      octave_function *tmpfcn = parse_fcn_file (file.substr (0, len - 2),
                                                nm, dispatch_type,
                                                package_name, false,
                                                autoload, autoload,
                                                relative_lookup, "");

      retval = octave_dynamic_loader::load_mex (nm, file, relative_lookup);

      if (tmpfcn)
        retval->document (tmpfcn->doc_string ());
      delete tmpfcn;
    }
  else if (len > 2)
    {
      retval = parse_fcn_file (file, nm, dispatch_type, package_name, true,
                               autoload, autoload, relative_lookup, "");
    }

  if (retval)
    {
      retval->stash_dir_name (dir_name);
      retval->stash_package_name (package_name);

      if (retval->is_user_function ())
        {
          symbol_table::scope_id id = retval->scope ();

          symbol_table::stash_dir_name_for_subfunctions (id, dir_name);
        }
    }

  return retval;
}

DEFUN (autoload, args, ,
       doc: /* -*- texinfo -*-
@deftypefn  {} {@var{autoload_map} =} autoload ()
@deftypefnx {} {} autoload (@var{function}, @var{file})
@deftypefnx {} {} autoload (@dots{}, "remove")
Define @var{function} to autoload from @var{file}.

The second argument, @var{file}, should be an absolute filename or a file
name in the same directory as the function or script from which the autoload
command was run.  @var{file} @emph{should not} depend on the Octave load
path.

Normally, calls to @code{autoload} appear in PKG_ADD script files that are
evaluated when a directory is added to Octave's load path.  To avoid having
to hardcode directory names in @var{file}, if @var{file} is in the same
directory as the PKG_ADD script then

@example
autoload ("foo", "bar.oct");
@end example

@noindent
will load the function @code{foo} from the file @code{bar.oct}.  The above
usage when @code{bar.oct} is not in the same directory, or usages such as

@example
autoload ("foo", file_in_loadpath ("bar.oct"))
@end example

@noindent
are strongly discouraged, as their behavior may be unpredictable.

With no arguments, return a structure containing the current autoload map.

If a third argument @qcode{"remove"} is given, the function is cleared and
not loaded anymore during the current Octave session.

@seealso{PKG_ADD}
@end deftypefn */)
{
  octave_value retval;

  int nargin = args.length ();

  if (nargin == 1 || nargin > 3)
    print_usage ();

  if (nargin == 0)
    {
      Cell func_names (dim_vector (autoload_map.size (), 1));
      Cell file_names (dim_vector (autoload_map.size (), 1));

      octave_idx_type i = 0;
      typedef std::map<std::string, std::string>::const_iterator am_iter;
      for (am_iter p = autoload_map.begin (); p != autoload_map.end (); p++)
        {
          func_names(i) = p->first;
          file_names(i) = p->second;

          i++;
        }

      octave_map m;

      m.assign ("function", func_names);
      m.assign ("file", file_names);

      retval = m;
    }
  else
    {
      string_vector argv = args.make_argv ("autoload");

      std::string nm = argv[2];

      if (! octave::sys::env::absolute_pathname (nm))
        {
          octave_user_code *fcn = octave_call_stack::caller_user_code ();

          bool found = false;

          if (fcn)
            {
              std::string fname = fcn->fcn_file_name ();

              if (! fname.empty ())
                {
                  fname = octave::sys::env::make_absolute (fname);
                  fname = fname.substr (0, fname.find_last_of (octave::sys::file_ops::dir_sep_str ()) + 1);

                  octave::sys::file_stat fs (fname + nm);

                  if (fs.exists ())
                    {
                      nm = fname + nm;
                      found = true;
                    }
                }
            }
          if (! found)
            warning_with_id ("Octave:autoload-relative-file-name",
                             "autoload: '%s' is not an absolute filename",
                             nm.c_str ());
        }
      if (nargin == 2)
        autoload_map[argv[1]] = nm;
      else if (nargin == 3)
        {
          if (argv[3] != "remove")
            error_with_id ("Octave:invalid-input-arg",
                           "autoload: third argument can only be 'remove'");

          // Remove function from symbol table and autoload map.
          symbol_table::clear_dld_function (argv[1]);
          autoload_map.erase (argv[1]);
        }
    }

  return retval;
}

void
source_file (const std::string& file_name, const std::string& context,
             bool verbose, bool require_file, const std::string& warn_for)
{
  // Map from absolute name of script file to recursion level.  We
  // use a map instead of simply placing a limit on recursion in the
  // source_file function so that two mutually recursive scripts
  // written as
  //
  //   foo1.m:
  //   ------
  //   foo2
  //
  //   foo2.m:
  //   ------
  //   foo1
  //
  // and called with
  //
  //   foo1
  //
  // (for example) will behave the same if they are written as
  //
  //   foo1.m:
  //   ------
  //   source ("foo2.m")
  //
  //   foo2.m:
  //   ------
  //   source ("foo1.m")
  //
  // and called with
  //
  //   source ("foo1.m")
  //
  // (for example).

  static std::map<std::string, int> source_call_depth;

  std::string file_full_name = octave::sys::file_ops::tilde_expand (file_name);

  file_full_name = octave::sys::env::make_absolute (file_full_name);

  octave::unwind_protect frame;

  if (source_call_depth.find (file_full_name) == source_call_depth.end ())
    source_call_depth[file_full_name] = -1;

  frame.protect_var (source_call_depth[file_full_name]);

  source_call_depth[file_full_name]++;

  if (source_call_depth[file_full_name] >= Vmax_recursion_depth)
    error ("max_recursion_depth exceeded");

  if (! context.empty ())
    {
      if (context == "caller")
        octave_call_stack::goto_caller_frame ();
      else if (context == "base")
        octave_call_stack::goto_base_frame ();
      else
        error ("source: context must be \"caller\" or \"base\"");

      frame.add_fcn (octave_call_stack::pop);
    }

  octave_function *fcn = 0;
  // Don't delete a function already in symbol_table
  bool delete_fcn = false;

  // Find symbol name that would be in symbol_table, if it were loaded.
  size_t dir_end = file_name.find_last_of (octave::sys::file_ops::dir_sep_chars ());
  dir_end = (dir_end == std::string::npos) ? 0 : dir_end + 1;

  size_t extension = file_name.find_last_of ('.');
  if (extension == std::string::npos)
    extension = file_name.length ();

  std::string symbol = file_name.substr (dir_end, extension - dir_end);
  std::string full_name = octave::sys::canonicalize_file_name (file_name);

  // Check if this file is already loaded (or in the path)
  octave_value loaded_sym = symbol_table::find (symbol);
  if (loaded_sym.is_function ())
    {
      fcn = loaded_sym.function_value ();
      if (fcn)
        {
          if (octave::sys::canonicalize_file_name (fcn->fcn_file_name ())
              != full_name)
            {
              fcn = 0;             // wrong file, so load it below
              delete_fcn = true;   // and delete it when done.
            }
        }
    }

  // If no symbol of this name, or the symbol is for a different file, load
  if (! fcn)
    {
      try
        {
          fcn = parse_fcn_file (file_full_name, file_name, "", "",
                                require_file, true, false, false, warn_for);
        }
      catch (octave::execution_exception& e)
        {
          error (e, "source: error sourcing file '%s'",
                 file_full_name.c_str ());
        }
    }

  // Return or error if we don't have a valid script
  if (! fcn)
    return;

  if (! fcn->is_user_code ())
    {
      if (delete_fcn)
        delete fcn;
      error ("source: %s is not a script", full_name.c_str ());
    }

  // Parameter checking is over.  Now run.
  octave_value_list args;

  if (verbose)
    {
      std::cout << "executing commands from " << full_name << " ... ";
      reading_startup_message_printed = true;
      std::cout.flush ();
    }

  fcn->do_multi_index_op (0, args);

  if (verbose)
    std::cout << "done." << std::endl;

  // Delete scripts not on the path, so they don't shadow ones that are.
  if (delete_fcn)
    delete fcn;
}

DEFUN (mfilename, args, ,
       doc: /* -*- texinfo -*-
@deftypefn  {} {} mfilename ()
@deftypefnx {} {} mfilename ("fullpath")
@deftypefnx {} {} mfilename ("fullpathext")
Return the name of the currently executing file.

When called from outside an m-file return the empty string.

Given the argument @qcode{"fullpath"}, include the directory part of the
filename, but not the extension.

Given the argument @qcode{"fullpathext"}, include the directory part of
the filename and the extension.
@end deftypefn */)
{
  octave_value retval;

  int nargin = args.length ();

  if (nargin > 1)
    print_usage ();

  std::string arg;

  if (nargin == 1)
    arg = args(0).xstring_value ("mfilename: argument must be a string");

  std::string fname;

  octave_user_code *fcn = octave_call_stack::caller_user_code ();

  if (fcn)
    {
      fname = fcn->fcn_file_name ();

      if (fname.empty ())
        fname = fcn->name ();
    }

  if (arg == "fullpathext")
    retval = fname;
  else
    {
      size_t dpos = fname.rfind (octave::sys::file_ops::dir_sep_char ());
      size_t epos = fname.rfind ('.');

      if (epos <= dpos)
        epos = std::string::npos;

      fname = (epos != std::string::npos) ? fname.substr (0, epos) : fname;

      if (arg == "fullpath")
        retval = fname;
      else
        retval = (dpos != std::string::npos) ? fname.substr (dpos+1) : fname;
    }

  return retval;
}

DEFUN (source, args, ,
       doc: /* -*- texinfo -*-
@deftypefn  {} {} source (@var{file})
@deftypefnx {} {} source (@var{file}, @var{context})
Parse and execute the contents of @var{file}.

Without specifying @var{context}, this is equivalent to executing commands
from a script file, but without requiring the file to be named
@file{@var{file}.m} or to be on the execution path.

Instead of the current context, the script may be executed in either the
context of the function that called the present function
(@qcode{"caller"}), or the top-level context (@qcode{"base"}).
@seealso{run}
@end deftypefn */)
{
  octave_value_list retval;

  int nargin = args.length ();

  if (nargin < 1 || nargin > 2)
    print_usage ();

  std::string file_name = args(0).xstring_value ("source: FILE must be a string");

  std::string context;

  if (nargin == 2)
    context = args(1).xstring_value ("source: CONTEXT must be a string");

  source_file (file_name, context);

  return retval;
}

/*!
    Evaluate an Octave function (built-in or interpreted) and return
    the list of result values.

    @param name The name of the function to call.
    @param args The arguments to the function.
    @param nargout The number of output arguments expected.
    @return A list of output values.  The length of the list is not
      necessarily the same as @c nargout.

*/
octave_value_list
feval (const std::string& name, const octave_value_list& args, int nargout)
{
  octave_value_list retval;

  octave_value fcn = symbol_table::find_function (name, args);

  if (fcn.is_defined ())
    retval = fcn.do_multi_index_op (nargout, args);
  else
    error ("feval: function '%s' not found", name.c_str ());

  return retval;
}

octave_value_list
feval (octave_function *fcn, const octave_value_list& args, int nargout)
{
  octave_value_list retval;

  if (fcn)
    retval = fcn->do_multi_index_op (nargout, args);

  return retval;
}

static octave_value_list
get_feval_args (const octave_value_list& args)
{
  return args.slice (1, args.length () - 1, true);
}

/*!
    Evaluate an Octave function (built-in or interpreted) and return
    the list of result values.

    @param args The first element of @c args is the function to call.
      It may be the name of the function as a string, a function
      handle, or an inline function.  The remaining arguments are
      passed to the function.
    @param nargout The number of output arguments expected.
    @return A list of output values.  The length of the list is not
      necessarily the same as @c nargout.
*/
octave_value_list
feval (const octave_value_list& args, int nargout)
{
  octave_value_list retval;

  if (args.length () > 0)
    {
      octave_value f_arg = args(0);

      if (f_arg.is_string ())
        {
          std::string name = f_arg.string_value ();

          octave_value_list tmp_args = get_feval_args (args);

          retval = feval (name, tmp_args, nargout);
        }
      else if (f_arg.is_function_handle ()
               || f_arg.is_anonymous_function ()
               || f_arg.is_inline_function ())
        {
          const octave_value_list tmp_args = get_feval_args (args);

          retval = f_arg.do_multi_index_op (nargout, tmp_args);
        }
      else
        error ("feval: first argument must be a string, inline function, or a function handle");
    }

  return retval;
}

DEFUN (feval, args, nargout,
       doc: /* -*- texinfo -*-
@deftypefn {} {} feval (@var{name}, @dots{})
Evaluate the function named @var{name}.

Any arguments after the first are passed as inputs to the named function.
For example,

@example
@group
feval ("acos", -1)
     @result{} 3.1416
@end group
@end example

@noindent
calls the function @code{acos} with the argument @samp{-1}.

The function @code{feval} can also be used with function handles of any sort
(@pxref{Function Handles}).  Historically, @code{feval} was the only way to
call user-supplied functions in strings, but function handles are now
preferred due to the cleaner syntax they offer.  For example,

@example
@group
@var{f} = @@exp;
feval (@var{f}, 1)
    @result{} 2.7183
@var{f} (1)
    @result{} 2.7183
@end group
@end example

@noindent
are equivalent ways to call the function referred to by @var{f}.  If it
cannot be predicted beforehand whether @var{f} is a function handle,
function name in a string, or inline function then @code{feval} can be used
instead.
@end deftypefn */)
{
  if (args.length () == 0)
    print_usage ();

  return feval (args, nargout);
}

DEFUN (builtin, args, nargout,
       doc: /* -*- texinfo -*-
@deftypefn {} {[@dots{}] =} builtin (@var{f}, @dots{})
Call the base function @var{f} even if @var{f} is overloaded to another
function for the given type signature.

This is normally useful when doing object-oriented programming and there is
a requirement to call one of Octave's base functions rather than the
overloaded one of a new class.

A trivial example which redefines the @code{sin} function to be the
@code{cos} function shows how @code{builtin} works.

@example
@group
sin (0)
  @result{} 0
function y = sin (x), y = cos (x); endfunction
sin (0)
  @result{} 1
builtin ("sin", 0)
  @result{} 0
@end group
@end example
@end deftypefn */)
{
  octave_value_list retval;

  if (args.length () == 0)
    print_usage ();

  const std::string name (args(0).xstring_value ("builtin: function name (F) must be a string"));

  octave_value fcn = symbol_table::builtin_find (name);

  if (fcn.is_defined ())
    retval = feval (fcn.function_value (), args.splice (0, 1), nargout);
  else
    error ("builtin: lookup for symbol '%s' failed", name.c_str ());

  return retval;
}

octave_value_list
eval_string (const std::string& eval_str, bool silent,
             int& parse_status, int nargout)
{
  octave_value_list retval;

  octave::parser parser (eval_str);

  do
    {
      parser.reset ();

      parse_status = parser.run ();

      if (parse_status == 0)
        {
          if (parser.stmt_list)
            {
              tree_statement *stmt = 0;

              if (parser.stmt_list->length () == 1
                  && (stmt = parser.stmt_list->front ())
                  && stmt->is_expression ())
                {
                  tree_expression *expr = stmt->expression ();

                  if (silent)
                    expr->set_print_flag (false);

                  bool do_bind_ans = false;

                  if (expr->is_identifier ())
                    {
                      tree_identifier *id
                        = dynamic_cast<tree_identifier *> (expr);

                      do_bind_ans = (! id->is_variable ());
                    }
                  else
                    do_bind_ans = (! expr->is_assignment_expression ());

                  retval = expr->rvalue (nargout);

                  if (do_bind_ans && ! retval.empty ())
                    bind_ans (retval(0), expr->print_result ());

                  if (nargout == 0)
                    retval = octave_value_list ();
                }
              else if (nargout == 0)
                parser.stmt_list->accept (*octave::current_evaluator);
              else
                error ("eval: invalid use of statement list");

              if (tree_return_command::returning
                  || tree_break_command::breaking
                  || tree_continue_command::continuing)
                break;
            }
          else if (parser.lexer.end_of_input)
            break;
        }
    }
  while (parse_status == 0);

  return retval;
}

octave_value
eval_string (const std::string& eval_str, bool silent, int& parse_status)
{
  octave_value retval;

  octave_value_list tmp = eval_string (eval_str, silent, parse_status, 1);

  if (! tmp.empty ())
    retval = tmp(0);

  return retval;
}

static octave_value_list
eval_string (const octave_value& arg, bool silent, int& parse_status,
             int nargout)
{
  std::string s = arg.xstring_value ("eval: expecting std::string argument");

  return eval_string (s, silent, parse_status, nargout);
}

void
cleanup_statement_list (tree_statement_list **lst)
{
  if (*lst)
    {
      delete *lst;
      *lst = 0;
    }
}

DEFUN (eval, args, nargout,
       doc: /* -*- texinfo -*-
@deftypefn  {} {} eval (@var{try})
@deftypefnx {} {} eval (@var{try}, @var{catch})
Parse the string @var{try} and evaluate it as if it were an Octave
program.

If execution fails, evaluate the optional string @var{catch}.

The string @var{try} is evaluated in the current context, so any results
remain available after @code{eval} returns.

The following example creates the variable @var{A} with the approximate
value of 3.1416 in the current workspace.

@example
eval ("A = acos(-1);");
@end example

If an error occurs during the evaluation of @var{try} then the @var{catch}
string is evaluated, as the following example shows:

@example
@group
eval ('error ("This is a bad example");',
      'printf ("This error occurred:\n%s\n", lasterr ());');
     @print{} This error occurred:
        This is a bad example
@end group
@end example

Programming Note: if you are only using @code{eval} as an error-capturing
mechanism, rather than for the execution of arbitrary code strings,
Consider using try/catch blocks or unwind_protect/unwind_protect_cleanup
blocks instead.  These techniques have higher performance and don't
introduce the security considerations that the evaluation of arbitrary code
does.
@seealso{evalin, evalc, assignin, feval}
@end deftypefn */)
{
  octave_value_list retval;

  int nargin = args.length ();

  if (nargin == 0)
    print_usage ();

  octave::unwind_protect frame;

  if (nargin > 1)
    {
      frame.protect_var (buffer_error_messages);
      buffer_error_messages++;
    }

  int parse_status = 0;

  bool execution_error = false;

  octave_value_list tmp;

  try
    {
      tmp = eval_string (args(0), nargout > 0, parse_status, nargout);
    }
  catch (const octave::execution_exception&)
    {
      recover_from_exception ();

      execution_error = true;
    }

  if (nargin > 1 && (parse_status != 0 || execution_error))
    {
      // Set up for letting the user print any messages from
      // errors that occurred in the first part of this eval().

      buffer_error_messages--;

      tmp = eval_string (args(1), nargout > 0, parse_status, nargout);

      if (nargout > 0)
        retval = tmp;
    }
  else
    {
      if (nargout > 0)
        retval = tmp;

      // FIXME: we should really be rethrowing whatever exception occurred,
      // not just throwing an execution exception.
      if (execution_error)
        octave_throw_execution_exception ();
    }

  return retval;
}

/*

%!shared x
%! x = 1;

%!assert (eval ("x"), 1)
%!assert (eval ("x;"))
%!assert (eval ("x;"), 1)

%!test
%! y = eval ("x");
%! assert (y, 1);

%!test
%! y = eval ("x;");
%! assert (y, 1);

%!test
%! eval ("x = 1;");
%! assert (x,1);

%!test
%! eval ("flipud = 2;");
%! assert (flipud, 2);

%!function y = __f ()
%!  eval ("flipud = 2;");
%!  y = flipud;
%!endfunction
%!assert (__f(), 2)

% bug #35645
%!test
%! [a,] = gcd (1,2);
%! [a,b,] = gcd (1, 2);

%!error eval ("switch = 13;")

*/

DEFUN (assignin, args, ,
       doc: /* -*- texinfo -*-
@deftypefn {} {} assignin (@var{context}, @var{varname}, @var{value})
Assign @var{value} to @var{varname} in context @var{context}, which
may be either @qcode{"base"} or @qcode{"caller"}.
@seealso{evalin}
@end deftypefn */)
{
  octave_value_list retval;

  if (args.length () != 3)
    print_usage ();

  std::string context = args(0).xstring_value ("assignin: CONTEXT must be a string");

  octave::unwind_protect frame;

  if (context == "caller")
    octave_call_stack::goto_caller_frame ();
  else if (context == "base")
    octave_call_stack::goto_base_frame ();
  else
    error ("assignin: CONTEXT must be \"caller\" or \"base\"");

  frame.add_fcn (octave_call_stack::pop);

  std::string nm = args(1).xstring_value ("assignin: VARNAME must be a string");

  if (valid_identifier (nm))
    {
      // Put the check here so that we don't slow down assignments
      // generally.  Any that go through Octave's parser should have
      // already been checked.

      if (octave::is_keyword (nm))
        error ("assignin: invalid assignment to keyword '%s'", nm.c_str ());

      symbol_table::assign (nm, args(2));
    }
  else
    error ("assignin: invalid variable name in argument VARNAME");

  return retval;
}

/*

%!error assignin ("base", "switch", "13")

*/

DEFUN (evalin, args, nargout,
       doc: /* -*- texinfo -*-
@deftypefn  {} {} evalin (@var{context}, @var{try})
@deftypefnx {} {} evalin (@var{context}, @var{try}, @var{catch})
Like @code{eval}, except that the expressions are evaluated in the context
@var{context}, which may be either @qcode{"caller"} or @qcode{"base"}.
@seealso{eval, assignin}
@end deftypefn */)
{
  octave_value_list retval;

  int nargin = args.length ();

  if (nargin < 2)
    print_usage ();

  std::string context = args(0).xstring_value ("evalin: CONTEXT must be a string");

  octave::unwind_protect frame;

  if (context == "caller")
    octave_call_stack::goto_caller_frame ();
  else if (context == "base")
    octave_call_stack::goto_base_frame ();
  else
    error ("evalin: CONTEXT must be \"caller\" or \"base\"");

  frame.add_fcn (octave_call_stack::pop);

  if (nargin > 2)
    {
      frame.protect_var (buffer_error_messages);
      buffer_error_messages++;
    }

  int parse_status = 0;

  bool execution_error = false;

  octave_value_list tmp;

  try
    {
      tmp = eval_string (args(1), nargout > 0,
                         parse_status, nargout);
    }
  catch (const octave::execution_exception&)
    {
      recover_from_exception ();

      execution_error = true;
    }

  if (nargin > 2 && (parse_status != 0 || execution_error))
    {
      // Set up for letting the user print any messages from
      // errors that occurred in the first part of this eval().

      buffer_error_messages--;

      tmp = eval_string (args(2), nargout > 0,
                         parse_status, nargout);

      retval = (nargout > 0) ? tmp : octave_value_list ();
    }
  else
    {
      if (nargout > 0)
        retval = tmp;

      // FIXME: we should really be rethrowing whatever
      // exception occurred, not just throwing an
      // execution exception.
      if (execution_error)
        octave_throw_execution_exception ();
    }

  return retval;
}

static void
maybe_print_last_error_message (bool *doit)
{
  if (doit && *doit)
    // Print error message again, which was lost because of the stderr buffer
    // Note: this keeps error_state and last_error_stack intact
    message_with_id ("error", last_error_id ().c_str (),
                     last_error_message ().c_str ());
}

static void
restore_octave_stdout (std::streambuf *buf)
{
  octave_stdout.flush ();
  octave_stdout.rdbuf (buf);
}

static void
restore_octave_stderr (std::streambuf *buf)
{
  std::cerr.flush ();
  std::cerr.rdbuf (buf);
}

DEFUN (evalc, args, nargout,
       doc: /* -*- texinfo -*-
@deftypefn  {} {@var{s} =} evalc (@var{try})
@deftypefnx {} {@var{s} =} evalc (@var{try}, @var{catch})
Parse and evaluate the string @var{try} as if it were an Octave program,
while capturing the output into the return variable @var{s}.

If execution fails, evaluate the optional string @var{catch}.

This function behaves like @code{eval}, but any output or warning messages
which would normally be written to the console are captured and returned in
the string @var{s}.

The @code{diary} is disabled during the execution of this function.  When
@code{system} is used, any output produced by external programs is
@emph{not} captured, unless their output is captured by the @code{system}
function itself.

@example
@group
s = evalc ("t = 42"), t
  @result{} s = t =  42

  @result{} t =  42
@end group
@end example
@seealso{eval, diary}
@end deftypefn */)
{
  int nargin = args.length ();

  if (nargin == 0 || nargin > 2)
    print_usage ();

  // redirect stdout/stderr to capturing buffer
  std::ostringstream buffer;

  std::ostream& out_stream = octave_stdout;
  std::ostream& err_stream = std::cerr;

  out_stream.flush ();
  err_stream.flush ();

  std::streambuf* old_out_buf = out_stream.rdbuf (buffer.rdbuf ());
  std::streambuf* old_err_buf = err_stream.rdbuf (buffer.rdbuf ());

  bool eval_error_occurred = true;

  octave::unwind_protect frame;

  frame.add_fcn (maybe_print_last_error_message, &eval_error_occurred);
  frame.add_fcn (restore_octave_stdout, old_out_buf);
  frame.add_fcn (restore_octave_stderr, old_err_buf);

  // call standard eval function
  octave_value_list retval;
  int eval_nargout = std::max (0, nargout - 1);

  retval = Feval (args, eval_nargout);
  eval_error_occurred = false;

  retval.prepend (buffer.str ());
  return retval;
}

/*

%!assert (evalc ("1"), "ans =  1\n")
%!assert (evalc ("1;"), "")

%!test
%! [s, y] = evalc ("1");
%! assert (s, "");
%! assert (y, 1);

%!test
%! [s, y] = evalc ("1;");
%! assert (s, "");
%! assert (y, 1);

%!test
%! assert (evalc ("y = 2"), "y =  2\n");
%! assert (y, 2);

%!test
%! assert (evalc ("y = 3;"), "");
%! assert (y, 3);

%!test
%! [s, a, b] = evalc ("deal (1, 2)");
%! assert (s, "");
%! assert (a, 1);
%! assert (b, 2);

%!function [a, b] = __f_evalc ()
%!  printf ("foo");
%!  fprintf (stdout, "bar");
%!  disp (pi);
%!  a = 1;
%!  b = 2;
%!endfunction
%!test
%! [s, a, b] = evalc ("__f_evalc ()");
%! assert (s, "foobar 3.1416\n");
%! assert (a, 1);
%! assert (b, 2);

%!error <foo> (evalc ("error ('foo')"))
%!error <bar> (evalc ("error ('foo')", "error ('bar')"))

%!test
%! warning ("off", "quiet", "local");
%! assert (evalc ("warning ('foo')"), "warning: foo\n");

%!test
%! warning ("off", "quiet", "local");
%! assert (evalc ("error ('foo')", "warning ('bar')"), "warning: bar\n");

%!error evalc ("switch = 13;")

*/

DEFUN (__parser_debug_flag__, args, nargout,
       doc: /* -*- texinfo -*-
@deftypefn  {} {@var{val} =} __parser_debug_flag__ ()
@deftypefnx {} {@var{old_val} =} __parser_debug_flag__ (@var{new_val})
Query or set the internal flag that determines whether Octave's parser
prints debug information as it processes an expression.
@seealso{__lexer_debug_flag__}
@end deftypefn */)
{
  octave_value retval;

  bool debug_flag = octave_debug;

  retval = set_internal_variable (debug_flag, args, nargout,
                                  "__parser_debug_flag__");

  octave_debug = debug_flag;

  return retval;
}

DEFUN (__parse_file__, args, ,
       doc: /* -*- texinfo -*-
@deftypefn {} {} __parse_file__ (@var{file}, @var{verbose})
Undocumented internal function.
@end deftypefn */)
{
  octave_value retval;

  int nargin = args.length ();

  if (nargin < 1 || nargin > 2)
    print_usage ();

  std::string file = args(0).xstring_value ("__parse_file__: expecting filename as argument");

  std::string full_file = octave::sys::env::make_absolute (file);

  size_t file_len = file.length ();

  if ((file_len > 4 && file.substr (file_len-4) == ".oct")
      || (file_len > 4 && file.substr (file_len-4) == ".mex")
      || (file_len > 2 && file.substr (file_len-2) == ".m"))
    {
      file = octave::sys::env::base_pathname (file);
      file = file.substr (0, file.find_last_of ('.'));

      size_t pos = file.find_last_of (octave::sys::file_ops::dir_sep_str ());
      if (pos != std::string::npos)
        file = file.substr (pos+1);
    }

  if (nargin == 2)
    octave_stdout << "parsing " << full_file << std::endl;

  octave_function *fcn = parse_fcn_file (full_file, file, "", "",
                                         true, false, false,
                                         false, "__parse_file__");

  if (fcn)
    delete fcn;

  return retval;
}

@c DO NOT EDIT!  Generated automatically by genpropdoc.m.

@c Copyright (C) 2014-2015 Pantxo Diribarne
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@table @asis

@anchor{XREFpatch__modified__}
@cindex patch __modified__
@item @code{__modified__}: @qcode{"off"} | @{@qcode{"on"}@}



@anchor{XREFpatchalphadatamapping}
@cindex patch alphadatamapping
@item @code{alphadatamapping}: @qcode{"direct"} | @qcode{"none"} | @{@qcode{"scaled"}@}
Transparency is not yet implemented for patch objects.  @code{alphadatamapping} is unused.


@anchor{XREFpatchambientstrength}
@cindex patch ambientstrength
@item @code{ambientstrength}: scalar, def. @code{0.30000}
Strength of the ambient light. Value between 0.0 and 1.0


@anchor{XREFpatchbackfacelighting}
@cindex patch backfacelighting
@item @code{backfacelighting}: @qcode{"lit"} | @{@qcode{"reverselit"}@} | @qcode{"unlit"}
@qcode{"lit"}: The normals are used as is for lighting. @qcode{"reverselit"}: The normals are always oriented towards the point of view. @qcode{"unlit"}: Faces with normals pointing away from the point of view are unlit.


@anchor{XREFpatchbeingdeleted}
@cindex patch beingdeleted
@item @code{beingdeleted}: @{@qcode{"off"}@} | @qcode{"on"}



@anchor{XREFpatchbusyaction}
@cindex patch busyaction
@item @code{busyaction}: @qcode{"cancel"} | @{@qcode{"queue"}@}



@anchor{XREFpatchbuttondownfcn}
@cindex patch buttondownfcn
@item @code{buttondownfcn}: string | function handle, def. @code{[](0x0)}



@anchor{XREFpatchcdata}
@cindex patch cdata
@item @code{cdata}: scalar | matrix, def. @code{[](0x0)}
Data defining the patch object color.
Patch color can be defined for faces or for vertices.

If @code{cdata} is a scalar index into the current colormap or a RGB triplet, it defines the color of all faces.

If @code{cdata} is an N-by-1 vector of indices or an N-by-3 (RGB) matrix, it defines the color of each one of the N faces.

If @code{cdata} is an N-by-M or an N-by-M-by-3 (RGB) matrix, it defines the color at each vertex.


@anchor{XREFpatchcdatamapping}
@cindex patch cdatamapping
@item @code{cdatamapping}: @qcode{"direct"} | @{@qcode{"scaled"}@}



@anchor{XREFpatchchildren}
@cindex patch children
@item @code{children} (read-only): vector of graphics handles, def. @code{[](0x1)}
@code{children} is unused.


@anchor{XREFpatchclipping}
@cindex patch clipping
@item @code{clipping}: @qcode{"off"} | @{@qcode{"on"}@}
If @code{clipping} is @qcode{"on"}, the patch is clipped in its parent axes limits.


@anchor{XREFpatchcreatefcn}
@cindex patch createfcn
@item @code{createfcn}: string | function handle, def. @code{[](0x0)}
Callback function executed immediately after patch has been created.  Function is set by using default property on root object, e.g., @code{set (0, "defaultpatchcreatefcn", 'disp ("patch created!")')}.


@anchor{XREFpatchdeletefcn}
@cindex patch deletefcn
@item @code{deletefcn}: string | function handle, def. @code{[](0x0)}
Callback function executed immediately before patch is deleted.


@anchor{XREFpatchdiffusestrength}
@cindex patch diffusestrength
@item @code{diffusestrength}: scalar, def. @code{0.60000}
Strength of the diffuse reflex. Value between 0.0 (no diffuse reflex) and 1.0 (full diffuse reflex).


@anchor{XREFpatchdisplayname}
@cindex patch displayname
@item @code{displayname}: def. @qcode{""}
Text of the legend entry corresponding to this patch.


@anchor{XREFpatchedgealpha}
@cindex patch edgealpha
@item @code{edgealpha}: scalar | matrix, def. @code{1}
Transparency is not yet implemented for patch objects.  @code{edgealpha} is unused.


@anchor{XREFpatchedgecolor}
@cindex patch edgecolor
@item @code{edgecolor}: def. @code{[0   0   0]}



@anchor{XREFpatchedgelighting}
@cindex patch edgelighting
@item @code{edgelighting}: @qcode{"flat"} | @qcode{"gouraud"} | @{@qcode{"none"}@} | @qcode{"phong"}
When set to a value other than @qcode{"none"}, the edges of the object are drawn with light and shadow effects.  Supported values are @qcode{"none"} (no lighting effects), @qcode{"flat"} (facetted look) and @qcode{"gouraud"} (linear interpolation of the lighting effects between the vertices). @qcode{"phong"} is deprecated and has the same effect as @qcode{"gouraud"}.


@anchor{XREFpatchfacealpha}
@cindex patch facealpha
@item @code{facealpha}: scalar | matrix, def. @code{1}
Transparency is not yet implemented for patch objects.  @code{facealpha} is unused.


@anchor{XREFpatchfacecolor}
@cindex patch facecolor
@item @code{facecolor}: @{colorspec@} | @qcode{"none"} | @qcode{"flat"} | @qcode{"interp"}, def. @code{[0   0   0]}



@anchor{XREFpatchfacelighting}
@cindex patch facelighting
@item @code{facelighting}: @{@qcode{"flat"}@} | @qcode{"gouraud"} | @qcode{"none"} | @qcode{"phong"}
When set to a value other than @qcode{"none"}, the faces of the object are drawn with light and shadow effects. Supported values are @qcode{"none"} (no lighting effects), @qcode{"flat"} (facetted look) and @qcode{"gouraud"} (linear interpolation of the lighting effects between the vertices). @qcode{"phong"} is deprecated and has the same effect as @qcode{"gouraud"}.


@anchor{XREFpatchfacenormals}
@cindex patch facenormals
@item @code{facenormals}: def. @code{[](0x0)}



@anchor{XREFpatchfacenormalsmode}
@cindex patch facenormalsmode
@item @code{facenormalsmode}: @{@qcode{"auto"}@} | @qcode{"manual"}



@anchor{XREFpatchfaces}
@cindex patch faces
@item @code{faces}: def. @code{[1   2   3]}



@anchor{XREFpatchfacevertexalphadata}
@cindex patch facevertexalphadata
@item @code{facevertexalphadata}: scalar | matrix, def. @code{[](0x0)}
Transparency is not yet implemented for patch objects.  @code{facevertexalphadata} is unused.


@anchor{XREFpatchfacevertexcdata}
@cindex patch facevertexcdata
@item @code{facevertexcdata}: def. @code{[](0x0)}



@anchor{XREFpatchhandlevisibility}
@cindex patch handlevisibility
@item @code{handlevisibility}: @qcode{"callback"} | @qcode{"off"} | @{@qcode{"on"}@}
If @code{handlevisibility} is @qcode{"off"}, the patch's handle is not visible in its parent's "children" property.


@anchor{XREFpatchhittest}
@cindex patch hittest
@item @code{hittest}: @qcode{"off"} | @{@qcode{"on"}@}



@anchor{XREFpatchinterpreter}
@cindex patch interpreter
@item @code{interpreter}: @qcode{"latex"} | @qcode{"none"} | @{@qcode{"tex"}@}
@code{interpreter} is unused.


@anchor{XREFpatchinterruptible}
@cindex patch interruptible
@item @code{interruptible}: @qcode{"off"} | @{@qcode{"on"}@}



@anchor{XREFpatchlinestyle}
@cindex patch linestyle
@item @code{linestyle}: @{@qcode{"-"}@} | @qcode{"--"} | @qcode{"-."} | @qcode{":"} | @qcode{"none"}



@anchor{XREFpatchlinewidth}
@cindex patch linewidth
@item @code{linewidth}: def. @code{0.50000}



@anchor{XREFpatchmarker}
@cindex patch marker
@item @code{marker}: @qcode{"*"} | @qcode{"+"} | @qcode{"."} | @qcode{"<"} | @qcode{">"} | @qcode{"^"} | @qcode{"d"} | @qcode{"diamond"} | @qcode{"h"} | @qcode{"hexagram"} | @{@qcode{"none"}@} | @qcode{"o"} | @qcode{"p"} | @qcode{"pentagram"} | @qcode{"s"} | @qcode{"square"} | @qcode{"v"} | @qcode{"x"}
@xref{XREFlinemarker, , @w{line marker property}}.


@anchor{XREFpatchmarkeredgecolor}
@cindex patch markeredgecolor
@item @code{markeredgecolor}: @{@qcode{"auto"}@} | @qcode{"flat"} | @qcode{"none"}
@xref{XREFlinemarkeredgecolor, , @w{line markeredgecolor property}}.


@anchor{XREFpatchmarkerfacecolor}
@cindex patch markerfacecolor
@item @code{markerfacecolor}: @qcode{"auto"} | @qcode{"flat"} | @{@qcode{"none"}@}
@xref{XREFlinemarkerfacecolor, , @w{line markerfacecolor property}}.


@anchor{XREFpatchmarkersize}
@cindex patch markersize
@item @code{markersize}: scalar, def. @code{6}
@xref{XREFlinemarkersize, , @w{line markersize property}}.


@anchor{XREFpatchparent}
@cindex patch parent
@item @code{parent}: graphics handle
Handle of the parent graphics object.


@anchor{XREFpatchselected}
@cindex patch selected
@item @code{selected}: @{@qcode{"off"}@} | @qcode{"on"}



@anchor{XREFpatchselectionhighlight}
@cindex patch selectionhighlight
@item @code{selectionhighlight}: @qcode{"off"} | @{@qcode{"on"}@}



@anchor{XREFpatchspecularcolorreflectance}
@cindex patch specularcolorreflectance
@item @code{specularcolorreflectance}: scalar, def. @code{1}
Reflectance for specular color.  Value between 0.0 (color of underlying face) and 1.0 (color of light source).


@anchor{XREFpatchspecularexponent}
@cindex patch specularexponent
@item @code{specularexponent}: scalar, def. @code{10}
Exponent for the specular reflex.  The lower the value, the more the reflex is spread out.


@anchor{XREFpatchspecularstrength}
@cindex patch specularstrength
@item @code{specularstrength}: scalar, def. @code{0.90000}
Strength of the specular reflex.  Value between 0.0 (no specular reflex) and 1.0 (full specular reflex).


@anchor{XREFpatchtag}
@cindex patch tag
@item @code{tag}: string, def. @qcode{""}
A user-defined string to label the graphics object.


@anchor{XREFpatchtype}
@cindex patch type
@item @code{type} (read-only): string
Class name of the graphics object.  @code{type} is always @qcode{"patch"}


@anchor{XREFpatchuicontextmenu}
@cindex patch uicontextmenu
@item @code{uicontextmenu}: graphics handle, def. @code{[](0x0)}
Graphics handle of the uicontextmenu object that is currently associated to this patch object.


@anchor{XREFpatchuserdata}
@cindex patch userdata
@item @code{userdata}: Any Octave data, def. @code{[](0x0)}
User-defined data to associate with the graphics object.


@anchor{XREFpatchvertexnormals}
@cindex patch vertexnormals
@item @code{vertexnormals}: def. @code{[](0x0)}



@anchor{XREFpatchvertexnormalsmode}
@cindex patch vertexnormalsmode
@item @code{vertexnormalsmode}: @{@qcode{"auto"}@} | @qcode{"manual"}



@anchor{XREFpatchvertices}
@cindex patch vertices
@item @code{vertices}: vector | matrix, def. 3-by-2 double



@anchor{XREFpatchvisible}
@cindex patch visible
@item @code{visible}: @qcode{"off"} | @{@qcode{"on"}@}
If @code{visible} is @qcode{"off"}, the patch is not rendered on screen.


@anchor{XREFpatchxdata}
@cindex patch xdata
@item @code{xdata}: vector | matrix, def. @code{[0;    1;    0]}



@anchor{XREFpatchydata}
@cindex patch ydata
@item @code{ydata}: vector | matrix, def. @code{[1;    1;    0]}



@anchor{XREFpatchzdata}
@cindex patch zdata
@item @code{zdata}: vector | matrix, def. @code{[](0x0)}


@end table